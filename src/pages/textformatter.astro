---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Advanced Text Formatter</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
            padding: 20px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            border-radius: 15px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
        }

        .header {
            background: #2337FF;
            color: white;
            text-align: center;
            padding: 25px;
            font-size: 24px;
            font-weight: 600;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 0;
            min-height: 600px;
        }

        .controls-panel {
            background: #f8f9fa;
            padding: 25px;
            border-right: 1px solid #e9ecef;
            overflow-y: auto;
        }

        .preview-panel {
            padding: 25px;
            background: white;
        }

        .control-group {
            margin-bottom: 20px;
            padding: 15px;
            background: white;
            border-radius: 8px;
            border-left: 4px solid #2337FF;
        }

        .control-group h3 {
            color: #2337FF;
            margin-bottom: 12px;
            font-size: 14px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .control-row {
            display: flex;
            gap: 10px;
            margin-bottom: 10px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 8px 16px;
            border: 2px solid #2337FF;
            background: white;
            color: #2337FF;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 60px;
        }

        .btn:hover {
            background: #2337FF;
            color: white;
            transform: translateY(-1px);
        }

        .btn.active {
            background: #2337FF;
            color: white;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 5px;
            margin-bottom: 10px;
        }

        .input-group label {
            font-size: 12px;
            font-weight: 500;
            color: #333;
        }

        input, select, textarea {
            padding: 8px;
            border: 2px solid #e9ecef;
            border-radius: 5px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        input:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #2337FF;
        }

        .color-input {
            width: 50px;
            height: 35px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

        .range-input {
            width: 100%;
        }

        .range-value {
            font-size: 12px;
            color: #666;
            text-align: center;
            margin-top: 5px;
        }

        .text-input {
            width: 100%;
            min-height: 120px;
            resize: vertical;
            font-family: inherit;
        }

        .preview-area {
            min-height: 200px;
            padding: 20px;
            border: 2px dashed #e9ecef;
            border-radius: 8px;
            background: #fafafa;
            word-wrap: break-word;
            position: relative;
        }

        .preview-text {
            font-size: 16px;
            line-height: 1.5;
            color: #333;
        }

        .action-buttons {
            display: flex;
            gap: 10px;
            margin-top: 20px;
        }

        .action-btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.3s ease;
            flex: 1;
        }

        .primary-btn {
            background: #2337FF;
            color: white;
        }

        .primary-btn:hover {
            background: #1a2acc;
            transform: translateY(-1px);
        }

        .secondary-btn {
            background: #6c757d;
            color: white;
        }

        .secondary-btn:hover {
            background: #5a6268;
            transform: translateY(-1px);
        }

        .notification {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #2337FF;
            color: white;
            padding: 12px 20px;
            border-radius: 5px;
            transform: translateX(100%);
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .notification.show {
            transform: translateX(0);
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .controls-panel {
                border-right: none;
                border-bottom: 1px solid #e9ecef;
            }
            
            .control-row {
                flex-direction: column;
            }
            
            .btn {
                flex: none;
            }
            
            body {
                padding: 10px;
            }
        }

        .two-col {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .three-col {
            display: grid;
            grid-template-columns: 1fr 1fr 1fr;
            gap: 8px;
        }

        .four-col {
            display: grid;
            grid-template-columns: repeat(4, 1fr);
            gap: 8px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            Advanced Text Formatter
        </div>
        
        <div class="main-content">
            <div class="controls-panel">
                <!-- Text Input -->
                <div class="control-group">
                    <h3>Text Input</h3>
                    <textarea class="text-input" id="textInput" placeholder="Enter your text here...">Welcome to the Advanced Text Formatter! This tool allows you to format and style your text in many different ways.</textarea>
                </div>

                <!-- Basic Formatting -->
                <div class="control-group">
                    <h3>Basic Formatting</h3>
                    <div class="control-row four-col">
                        <button class="btn" id="boldBtn">Bold</button>
                        <button class="btn" id="italicBtn">Italic</button>
                        <button class="btn" id="underlineBtn">Underline</button>
                        <button class="btn" id="strikeBtn">Strike</button>
                    </div>
                </div>

                <!-- Text Alignment -->
                <div class="control-group">
                    <h3>Text Alignment</h3>
                    <div class="control-row four-col">
                        <button class="btn" id="leftAlign">Left</button>
                        <button class="btn" id="centerAlign">Center</button>
                        <button class="btn" id="rightAlign">Right</button>
                        <button class="btn" id="justifyAlign">Justify</button>
                    </div>
                </div>

                <!-- Font Settings -->
                <div class="control-group">
                    <h3>Font Settings</h3>
                    <div class="input-group">
                        <label>Font Family</label>
                        <select id="fontFamily">
                            <option value="Arial, sans-serif">Arial</option>
                            <option value="Georgia, serif">Georgia</option>
                            <option value="'Times New Roman', serif">Times New Roman</option>
                            <option value="'Courier New', monospace">Courier New</option>
                            <option value="Verdana, sans-serif">Verdana</option>
                            <option value="Helvetica, sans-serif">Helvetica</option>
                            <option value="'Comic Sans MS', cursive">Comic Sans MS</option>
                            <option value="Impact, sans-serif">Impact</option>
                        </select>
                    </div>
                    <div class="input-group">
                        <label>Font Size</label>
                        <input type="range" class="range-input" id="fontSize" min="8" max="72" value="16">
                        <div class="range-value" id="fontSizeValue">16px</div>
                    </div>
                </div>

                <!-- Colors -->
                <div class="control-group">
                    <h3>Colors</h3>
                    <div class="two-col">
                        <div class="input-group">
                            <label>Text Color</label>
                            <input type="color" class="color-input" id="textColor" value="#000000">
                        </div>
                        <div class="input-group">
                            <label>Background Color</label>
                            <input type="color" class="color-input" id="bgColor" value="#ffffff">
                        </div>
                    </div>
                </div>

                <!-- Text Transform -->
                <div class="control-group">
                    <h3>Text Transform</h3>
                    <div class="control-row three-col">
                        <button class="btn" id="upperCase">UPPER</button>
                        <button class="btn" id="lowerCase">lower</button>
                        <button class="btn" id="capitalCase">Title</button>
                    </div>
                </div>

                <!-- Advanced Styling -->
                <div class="control-group">
                    <h3>Advanced Styling</h3>
                    <div class="input-group">
                        <label>Letter Spacing</label>
                        <input type="range" class="range-input" id="letterSpacing" min="-5" max="20" value="0">
                        <div class="range-value" id="letterSpacingValue">0px</div>
                    </div>
                    <div class="input-group">
                        <label>Line Height</label>
                        <input type="range" class="range-input" id="lineHeight" min="0.5" max="3" step="0.1" value="1.5">
                        <div class="range-value" id="lineHeightValue">1.5</div>
                    </div>
                    <div class="control-row two-col">
                        <button class="btn" id="shadowBtn">Text Shadow</button>
                        <button class="btn" id="gradientBtn">Gradient</button>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="action-buttons">
                    <button class="action-btn primary-btn" id="copyBtn">Copy Text</button>
                    <button class="action-btn secondary-btn" id="resetBtn">Reset All</button>
                </div>
            </div>

            <div class="preview-panel">
                <h3 style="color: #2337FF; margin-bottom: 15px;">Live Preview</h3>
                <div class="preview-area">
                    <div class="preview-text" id="previewText">Welcome to the Advanced Text Formatter! This tool allows you to format and style your text in many different ways.</div>
                </div>
                
                <div style="margin-top: 20px;">
                    <h4 style="color: #2337FF; margin-bottom: 10px;">CSS Output</h4>
                    <textarea id="cssOutput" style="width: 100%; height: 200px; font-family: 'Courier New', monospace; font-size: 12px; resize: vertical;" readonly></textarea>
                </div>
            </div>
        </div>
    </div>

    <div class="notification" id="notification">Text copied to clipboard!</div>

    <script>
        class TextFormatter {
            constructor() {
                this.textInput = document.getElementById('textInput');
                this.previewText = document.getElementById('previewText');
                this.cssOutput = document.getElementById('cssOutput');
                this.currentStyles = {
                    fontWeight: 'normal',
                    fontStyle: 'normal',
                    textDecoration: 'none',
                    textAlign: 'left',
                    fontFamily: 'Arial, sans-serif',
                    fontSize: '16px',
                    color: '#000000',
                    backgroundColor: '#ffffff',
                    textTransform: 'none',
                    letterSpacing: '0px',
                    lineHeight: '1.5',
                    textShadow: 'none'
                };
                this.init();
            }

            init() {
                this.bindEvents();
                this.updatePreview();
            }

            bindEvents() {
                // Text input
                this.textInput.addEventListener('input', () => this.updatePreview());

                // Basic formatting
                document.getElementById('boldBtn').addEventListener('click', () => this.toggleBold());
                document.getElementById('italicBtn').addEventListener('click', () => this.toggleItalic());
                document.getElementById('underlineBtn').addEventListener('click', () => this.toggleUnderline());
                document.getElementById('strikeBtn').addEventListener('click', () => this.toggleStrike());

                // Alignment
                document.getElementById('leftAlign').addEventListener('click', () => this.setAlignment('left'));
                document.getElementById('centerAlign').addEventListener('click', () => this.setAlignment('center'));
                document.getElementById('rightAlign').addEventListener('click', () => this.setAlignment('right'));
                document.getElementById('justifyAlign').addEventListener('click', () => this.setAlignment('justify'));

                // Font settings
                document.getElementById('fontFamily').addEventListener('change', (e) => this.setFontFamily(e.target.value));
                document.getElementById('fontSize').addEventListener('input', (e) => this.setFontSize(e.target.value));

                // Colors
                document.getElementById('textColor').addEventListener('input', (e) => this.setTextColor(e.target.value));
                document.getElementById('bgColor').addEventListener('input', (e) => this.setBgColor(e.target.value));

                // Text transform
                document.getElementById('upperCase').addEventListener('click', () => this.setTextTransform('uppercase'));
                document.getElementById('lowerCase').addEventListener('click', () => this.setTextTransform('lowercase'));
                document.getElementById('capitalCase').addEventListener('click', () => this.setTextTransform('capitalize'));

                // Advanced styling
                document.getElementById('letterSpacing').addEventListener('input', (e) => this.setLetterSpacing(e.target.value));
                document.getElementById('lineHeight').addEventListener('input', (e) => this.setLineHeight(e.target.value));
                document.getElementById('shadowBtn').addEventListener('click', () => this.toggleTextShadow());
                document.getElementById('gradientBtn').addEventListener('click', () => this.toggleGradient());

                // Actions
                document.getElementById('copyBtn').addEventListener('click', () => this.copyText());
                document.getElementById('resetBtn').addEventListener('click', () => this.resetAll());
            }

            toggleBold() {
                const btn = document.getElementById('boldBtn');
                this.currentStyles.fontWeight = this.currentStyles.fontWeight === 'bold' ? 'normal' : 'bold';
                btn.classList.toggle('active');
                this.updatePreview();
            }

            toggleItalic() {
                const btn = document.getElementById('italicBtn');
                this.currentStyles.fontStyle = this.currentStyles.fontStyle === 'italic' ? 'normal' : 'italic';
                btn.classList.toggle('active');
                this.updatePreview();
            }

            toggleUnderline() {
                const btn = document.getElementById('underlineBtn');
                const isUnderlined = this.currentStyles.textDecoration.includes('underline');
                if (isUnderlined) {
                    this.currentStyles.textDecoration = this.currentStyles.textDecoration.replace('underline', '').trim();
                } else {
                    this.currentStyles.textDecoration += ' underline';
                }
                this.currentStyles.textDecoration = this.currentStyles.textDecoration.trim() || 'none';
                btn.classList.toggle('active');
                this.updatePreview();
            }

            toggleStrike() {
                const btn = document.getElementById('strikeBtn');
                const isStrikethrough = this.currentStyles.textDecoration.includes('line-through');
                if (isStrikethrough) {
                    this.currentStyles.textDecoration = this.currentStyles.textDecoration.replace('line-through', '').trim();
                } else {
                    this.currentStyles.textDecoration += ' line-through';
                }
                this.currentStyles.textDecoration = this.currentStyles.textDecoration.trim() || 'none';
                btn.classList.toggle('active');
                this.updatePreview();
            }

            setAlignment(align) {
                document.querySelectorAll('[id$="Align"]').forEach(btn => btn.classList.remove('active'));
                document.getElementById(align + 'Align').classList.add('active');
                this.currentStyles.textAlign = align;
                this.updatePreview();
            }

            setFontFamily(family) {
                this.currentStyles.fontFamily = family;
                this.updatePreview();
            }

            setFontSize(size) {
                this.currentStyles.fontSize = size + 'px';
                document.getElementById('fontSizeValue').textContent = size + 'px';
                this.updatePreview();
            }

            setTextColor(color) {
                this.currentStyles.color = color;
                this.updatePreview();
            }

            setBgColor(color) {
                this.currentStyles.backgroundColor = color;
                this.updatePreview();
            }

            setTextTransform(transform) {
                document.querySelectorAll('[id$="Case"]').forEach(btn => btn.classList.remove('active'));
                if (this.currentStyles.textTransform === transform) {
                    this.currentStyles.textTransform = 'none';
                } else {
                    this.currentStyles.textTransform = transform;
                    document.getElementById(transform.replace('upper', 'upper').replace('lower', 'lower').replace('capitalize', 'capital') + 'Case').classList.add('active');
                }
                this.updatePreview();
            }

            setLetterSpacing(spacing) {
                this.currentStyles.letterSpacing = spacing + 'px';
                document.getElementById('letterSpacingValue').textContent = spacing + 'px';
                this.updatePreview();
            }

            setLineHeight(height) {
                this.currentStyles.lineHeight = height;
                document.getElementById('lineHeightValue').textContent = height;
                this.updatePreview();
            }

            toggleTextShadow() {
                const btn = document.getElementById('shadowBtn');
                if (this.currentStyles.textShadow === 'none') {
                    this.currentStyles.textShadow = '2px 2px 4px rgba(0,0,0,0.3)';
                    btn.classList.add('active');
                } else {
                    this.currentStyles.textShadow = 'none';
                    btn.classList.remove('active');
                }
                this.updatePreview();
            }

            toggleGradient() {
                const btn = document.getElementById('gradientBtn');
                if (this.currentStyles.background && this.currentStyles.background.includes('gradient')) {
                    delete this.currentStyles.background;
                    delete this.currentStyles.webkitBackgroundClip;
                    delete this.currentStyles.webkitTextFillColor;
                    btn.classList.remove('active');
                } else {
                    this.currentStyles.background = 'linear-gradient(45deg, #2337FF, #00d4ff)';
                    this.currentStyles.webkitBackgroundClip = 'text';
                    this.currentStyles.webkitTextFillColor = 'transparent';
                    btn.classList.add('active');
                }
                this.updatePreview();
            }

            updatePreview() {
                const text = this.textInput.value || 'Enter your text to see the preview...';
                this.previewText.textContent = text;
                
                // Apply styles
                Object.keys(this.currentStyles).forEach(style => {
                    if (style === 'webkitBackgroundClip') {
                        this.previewText.style['-webkit-background-clip'] = this.currentStyles[style];
                    } else if (style === 'webkitTextFillColor') {
                        this.previewText.style['-webkit-text-fill-color'] = this.currentStyles[style];
                    } else {
                        this.previewText.style[style] = this.currentStyles[style];
                    }
                });

                this.updateCSSOutput();
            }

            updateCSSOutput() {
                let css = '.formatted-text {\n';
                Object.keys(this.currentStyles).forEach(style => {
                    const cssProperty = style.replace(/([A-Z])/g, '-$1').toLowerCase();
                    if (style === 'webkitBackgroundClip') {
                        css += `  -webkit-background-clip: ${this.currentStyles[style]};\n`;
                    } else if (style === 'webkitTextFillColor') {
                        css += `  -webkit-text-fill-color: ${this.currentStyles[style]};\n`;
                    } else {
                        css += `  ${cssProperty}: ${this.currentStyles[style]};\n`;
                    }
                });
                css += '}';
                this.cssOutput.value = css;
            }

            copyText() {
                const textToCopy = this.textInput.value;
                navigator.clipboard.writeText(textToCopy).then(() => {
                    this.showNotification('Text copied to clipboard!');
                }).catch(() => {
                    // Fallback for older browsers
                    const textArea = document.createElement('textarea');
                    textArea.value = textToCopy;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                    this.showNotification('Text copied to clipboard!');
                });
            }

            resetAll() {
                // Reset styles
                this.currentStyles = {
                    fontWeight: 'normal',
                    fontStyle: 'normal',
                    textDecoration: 'none',
                    textAlign: 'left',
                    fontFamily: 'Arial, sans-serif',
                    fontSize: '16px',
                    color: '#000000',
                    backgroundColor: '#ffffff',
                    textTransform: 'none',
                    letterSpacing: '0px',
                    lineHeight: '1.5',
                    textShadow: 'none'
                };

                // Reset UI controls
                document.querySelectorAll('.btn.active').forEach(btn => btn.classList.remove('active'));
                document.getElementById('leftAlign').classList.add('active');
                document.getElementById('fontFamily').value = 'Arial, sans-serif';
                document.getElementById('fontSize').value = 16;
                document.getElementById('fontSizeValue').textContent = '16px';
                document.getElementById('textColor').value = '#000000';
                document.getElementById('bgColor').value = '#ffffff';
                document.getElementById('letterSpacing').value = 0;
                document.getElementById('letterSpacingValue').textContent = '0px';
                document.getElementById('lineHeight').value = 1.5;
                document.getElementById('lineHeightValue').textContent = '1.5';

                this.updatePreview();
                this.showNotification('All formatting reset!');
            }

            showNotification(message) {
                const notification = document.getElementById('notification');
                notification.textContent = message;
                notification.classList.add('show');
                setTimeout(() => {
                    notification.classList.remove('show');
                }, 3000);
            }
        }

        // Initialize the formatter when the page loads
        document.addEventListener('DOMContentLoaded', () => {
            new TextFormatter();
        });
    </script>
</body>
</html>
