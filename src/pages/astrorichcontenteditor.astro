---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE } from '../consts';

const title = 'Markdown Editor';
const description = 'Create rich content and convert it to Astro-compatible markdown';
---

<!doctype html>
<html lang="en">
	<head>
		<BaseHead title={`${title} | ${SITE_TITLE}`} description={description} />
		<style>
			* {
				box-sizing: border-box;
			}

			body {
				margin: 0;
				padding: 0;
				min-height: 100vh;
				display: flex;
				flex-direction: column;
			}

			main {
				flex: 1;
				display: flex;
				flex-direction: column;
			}

			.editor-container {
				flex: 1;
				display: flex;
				flex-direction: column;
				padding: 1rem;
				min-height: calc(100vh - 120px);
			}

			.editor-header {
				text-align: center;
				margin-bottom: 1.5rem;
			}

			.editor-header h1 {
				color: #0F1219;
				font-size: 2rem;
				margin-bottom: 0.5rem;
			}

			.editor-header p {
				color: #0F1219;
				opacity: 0.8;
				font-size: 1rem;
			}

			.toolbar {
				background: #F8F9FB;
				padding: 1rem;
				border-radius: 8px 8px 0 0;
				border: 1px solid #2337FF;
				border-bottom: none;
				display: flex;
				flex-wrap: wrap;
				gap: 0.5rem;
			}

			.btn-group {
				display: flex;
				border: 1px solid #2337FF;
				border-radius: 4px;
				overflow: hidden;
			}

			.toolbar-btn {
				background: white;
				border: none;
				padding: 0.5rem 0.75rem;
				cursor: pointer;
				font-size: 0.875rem;
				transition: all 0.2s;
				border-right: 1px solid #2337FF;
				color: #0F1219;
			}

			.toolbar-btn:last-child {
				border-right: none;
			}

			.toolbar-btn:hover {
				background: #2337FF;
				color: white;
			}

			.main-editor {
				display: grid;
				grid-template-columns: 1fr 1fr;
				gap: 0;
				border: 1px solid #2337FF;
				border-radius: 0 0 8px 8px;
				overflow: hidden;
				flex: 1;
				min-height: 600px;
			}

			.editor-panel, .output-panel {
				padding: 1.5rem;
				overflow-y: auto;
				display: flex;
				flex-direction: column;
			}

			.editor-panel {
				background: white;
				border-right: 1px solid #2337FF;
			}

			.output-panel {
				background: #F8F9FB;
			}

			.editor {
				flex: 1;
				border: 1px solid #2337FF;
				border-radius: 4px;
				padding: 1rem;
				font-size: 1rem;
				line-height: 1.6;
				outline: none;
				background: white;
				color: #0F1219;
				overflow-y: auto;
			}

			.editor:focus {
				border-color: #2337FF;
				box-shadow: 0 0 0 2px rgba(35, 55, 255, 0.1);
			}

			/* Table styling in editor */
			.editor table {
				border-collapse: collapse;
				width: 100%;
				margin: 1rem 0;
				border: 2px solid #2337FF;
			}

			.editor th, .editor td {
				border: 1px solid #2337FF;
				padding: 8px 12px;
				text-align: left;
				min-width: 100px;
				position: relative;
			}

			.editor th {
				background: #F8F9FB;
				font-weight: 600;
			}

			.editor td:hover, .editor th:hover {
				background: rgba(35, 55, 255, 0.05);
			}

			.output {
				background: #0F1219;
				color: white;
				padding: 1rem;
				border-radius: 4px;
				font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
				font-size: 0.875rem;
				line-height: 1.6;
				white-space: pre-wrap;
				word-wrap: break-word;
				flex: 1;
			}

			.panel-header {
				font-weight: 600;
				margin-bottom: 1rem;
				color: #0F1219;
				display: flex;
				justify-content: space-between;
				align-items: center;
				flex-shrink: 0;
			}

			.copy-btn {
				background: #2337FF;
				color: white;
				border: none;
				padding: 0.5rem 1rem;
				border-radius: 4px;
				cursor: pointer;
				font-size: 0.875rem;
				transition: all 0.2s;
			}

			.copy-btn:hover {
				background: #0F1219;
			}

			.preview-mode {
				background: white;
				border: 1px solid #2337FF;
				border-radius: 4px;
				padding: 1rem;
				font-size: 1rem;
				line-height: 1.6;
				flex: 1;
				color: #0F1219;
				overflow-y: auto;
			}

			.preview-mode h1, .preview-mode h2, .preview-mode h3, 
			.preview-mode h4, .preview-mode h5, .preview-mode h6 {
				margin-bottom: 0.75rem;
				color: #0F1219;
			}

			.preview-mode blockquote {
				border-left: 4px solid #2337FF;
				padding-left: 1rem;
				margin: 1rem 0;
				color: #0F1219;
				opacity: 0.8;
				font-style: italic;
			}

			.preview-mode table {
				width: 100%;
				border-collapse: collapse;
				margin: 1rem 0;
			}

			.preview-mode th, .preview-mode td {
				border: 1px solid #2337FF;
				padding: 0.5rem 0.75rem;
				text-align: left;
			}

			.preview-mode th {
				background: #F8F9FB;
				font-weight: 600;
			}

			.preview-mode code {
				background: #F8F9FB;
				padding: 0.125rem 0.25rem;
				border-radius: 3px;
				font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
				color: #2337FF;
			}

			.preview-mode pre {
				background: #0F1219;
				color: white;
				padding: 1rem;
				border-radius: 4px;
				overflow-x: auto;
				margin: 1rem 0;
			}

			.tab-buttons {
				display: flex;
				margin-bottom: 1rem;
			}

			.tab-btn {
				background: #F8F9FB;
				border: 1px solid #2337FF;
				padding: 0.5rem 1rem;
				cursor: pointer;
				border-bottom: none;
				transition: all 0.2s;
				color: #0F1219;
			}

			.tab-btn:first-child {
				border-radius: 4px 0 0 0;
			}

			.tab-btn:last-child {
				border-radius: 0 4px 0 0;
			}

			.tab-btn.active {
				background: white;
				border-bottom: 1px solid white;
				position: relative;
				z-index: 1;
			}

			.instructions {
				background: #F8F9FB;
				border: 1px solid #2337FF;
				border-radius: 8px;
				padding: 1rem;
				margin-bottom: 1rem;
				flex-shrink: 0;
			}

			.instructions h2 {
				color: #0F1219;
				margin-bottom: 0.75rem;
				font-size: 1.1rem;
			}

			.instructions ul {
				color: #0F1219;
				padding-left: 1.5rem;
				margin: 0;
			}

			.instructions li {
				margin-bottom: 0.25rem;
				font-size: 0.9rem;
			}

			/* Table Context Menu */
			.table-menu {
				position: absolute;
				background: white;
				border: 1px solid #2337FF;
				border-radius: 4px;
				padding: 0.5rem;
				display: none;
				z-index: 1000;
				box-shadow: 0 4px 12px rgba(0,0,0,0.15);
			}

			.table-menu-btn {
				display: block;
				width: 100%;
				background: none;
				border: none;
				padding: 0.5rem;
				text-align: left;
				cursor: pointer;
				color: #0F1219;
				font-size: 0.875rem;
				border-radius: 2px;
			}

			.table-menu-btn:hover {
				background: #F8F9FB;
			}

			@media (max-width: 768px) {
				.main-editor {
					grid-template-columns: 1fr;
					min-height: auto;
				}
				
				.editor-panel {
					border-right: none;
					border-bottom: 1px solid #2337FF;
					min-height: 400px;
				}

				.output-panel {
					min-height: 300px;
				}
				
				.toolbar {
					padding: 0.75rem;
				}
				
				.toolbar-btn {
					padding: 0.375rem 0.5rem;
					font-size: 0.75rem;
				}

				.editor-container {
					padding: 0.5rem;
				}

				.editor-header h1 {
					font-size: 1.5rem;
				}

				.editor-header p {
					font-size: 0.9rem;
				}

				.instructions {
					padding: 0.75rem;
				}

				.instructions h2 {
					font-size: 1rem;
				}

				.instructions li {
					font-size: 0.8rem;
				}
			}

			@media (max-width: 480px) {
				.btn-group {
					flex-wrap: wrap;
				}

				.toolbar-btn {
					flex: 1;
					min-width: 60px;
				}

				.editor {
					padding: 0.75rem;
				}

				.output {
					padding: 0.75rem;
					font-size: 0.8rem;
				}
			}
		</style>
	</head>
	<body>
		<Header />
		<main>
			<div class="editor-container">
				<div class="editor-header">
					<h1>üöÄ Markdown Editor</h1>
					<p>Create rich content and convert it to Astro-compatible markdown</p>
				</div>

				<div class="instructions">
					<h2>How to Use</h2>
					<ul>
						<li><strong>Type or paste content</strong> in the editor ‚Ä¢ <strong>Use toolbar buttons</strong> to format ‚Ä¢ <strong>Right-click tables</strong> to edit</li>
						<li><strong>View live markdown</strong> in output ‚Ä¢ <strong>Switch to Preview</strong> to see rendering ‚Ä¢ <strong>Copy markdown</strong> for Astro</li>
					</ul>
				</div>

				<div class="toolbar">
					<div class="btn-group">
						<button class="toolbar-btn" onclick="formatText('bold')" title="Bold">
							<strong>B</strong>
						</button>
						<button class="toolbar-btn" onclick="formatText('italic')" title="Italic">
							<em>I</em>
						</button>
						<button class="toolbar-btn" onclick="formatText('underline')" title="Underline">
							<u>U</u>
						</button>
						<button class="toolbar-btn" onclick="insertCode()" title="Inline Code">
							&lt;&gt;
						</button>
					</div>

					<div class="btn-group">
						<button class="toolbar-btn" onclick="insertHeading(1)" title="H1">H1</button>
						<button class="toolbar-btn" onclick="insertHeading(2)" title="H2">H2</button>
						<button class="toolbar-btn" onclick="insertHeading(3)" title="H3">H3</button>
						<button class="toolbar-btn" onclick="insertHeading(4)" title="H4">H4</button>
					</div>

					<div class="btn-group">
						<button class="toolbar-btn" onclick="insertList('ul')" title="Bullet List">‚Ä¢ List</button>
						<button class="toolbar-btn" onclick="insertList('ol')" title="Numbered List">1. List</button>
						<button class="toolbar-btn" onclick="insertBlockquote()" title="Quote">&gt; Quote</button>
					</div>

					<div class="btn-group">
						<button class="toolbar-btn" onclick="insertTable()" title="Table">üìä Table</button>
						<button class="toolbar-btn" onclick="insertCodeBlock()" title="Code Block">{ } Code</button>
						<button class="toolbar-btn" onclick="insertLink()" title="Link">üîó Link</button>
						<button class="toolbar-btn" onclick="insertImage()" title="Image">üñºÔ∏è Image</button>
					</div>
				</div>

				<div class="main-editor">
					<div class="editor-panel">
						<div class="panel-header">
							<span>Rich Text Editor</span>
						</div>
						<div id="editor" class="editor" contenteditable="true">
							<h1>Welcome to Astro Markdown Editor</h1>
							<p>Start typing your content here. Use the toolbar above to format your text.</p>
							<h2>Features</h2>
							<ul>
								<li><strong>Bold</strong> and <em>italic</em> text</li>
								<li>Headers from H1 to H6</li>
								<li>Bullet and numbered lists</li>
								<li>Code blocks and inline <code>code</code></li>
								<li>Interactive tables with editing options</li>
							</ul>
							<p>This editor generates clean markdown that works perfectly with Astro's content system.</p>
						</div>
					</div>

					<div class="output-panel">
						<div class="panel-header">
							<div class="tab-buttons">
								<button class="tab-btn active" onclick="switchTab('markdown')">Markdown</button>
								<button class="tab-btn" onclick="switchTab('preview')">Preview</button>
							</div>
							<button class="copy-btn" onclick="copyMarkdown()">üìã Copy</button>
						</div>
						<div id="markdown-output" class="output"></div>
						<div id="preview-output" class="preview-mode" style="display: none;"></div>
					</div>
				</div>
			</div>

			<!-- Table Context Menu -->
			<div id="table-menu" class="table-menu">
				<button class="table-menu-btn" onclick="addRowAbove()">Add Row Above</button>
				<button class="table-menu-btn" onclick="addRowBelow()">Add Row Below</button>
				<button class="table-menu-btn" onclick="addColumnLeft()">Add Column Left</button>
				<button class="table-menu-btn" onclick="addColumnRight()">Add Column Right</button>
				<button class="table-menu-btn" onclick="deleteRow()">Delete Row</button>
				<button class="table-menu-btn" onclick="deleteColumn()">Delete Column</button>
				<button class="table-menu-btn" onclick="toggleHeader()">Toggle Header</button>
			</div>
		</main>
		<Footer />

		<script>
			let currentTab = 'markdown';
			let currentTable = null;
			let currentCell = null;

			// Maintain focus after toolbar operations
			function saveSelection() {
				const selection = window.getSelection();
				if (selection.rangeCount > 0) {
					return selection.getRangeAt(0);
				}
				return null;
			}

			function restoreSelection(range) {
				if (range) {
					const selection = window.getSelection();
					selection.removeAllRanges();
					selection.addRange(range);
				}
			}

			function formatText(command) {
				const range = saveSelection();
				document.execCommand(command, false, null);
				setTimeout(() => {
					document.getElementById('editor').focus();
					if (range) restoreSelection(range);
					convertToMarkdown();
				}, 10);
			}

			function insertHeading(level) {
				const range = saveSelection();
				const selection = window.getSelection();
				
				if (selection.toString()) {
					// Wrap selected text
					const heading = document.createElement('h' + level);
					heading.textContent = selection.toString();
					
					if (range) {
						range.deleteContents();
						range.insertNode(heading);
						
						// Position cursor after heading
						const newRange = document.createRange();
						newRange.setStartAfter(heading);
						newRange.setEndAfter(heading);
						selection.removeAllRanges();
						selection.addRange(newRange);
					}
				} else {
					// Insert new heading
					const heading = document.createElement('h' + level);
					heading.textContent = 'Heading ' + level;
					
					if (range) {
						range.insertNode(heading);
						
						// Select the text for editing
						const newRange = document.createRange();
						newRange.selectNodeContents(heading);
						selection.removeAllRanges();
						selection.addRange(newRange);
					}
				}
				
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertList(type) {
				const range = saveSelection();
				document.execCommand('insert' + (type === 'ul' ? 'UnorderedList' : 'OrderedList'), false, null);
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertBlockquote() {
				const range = saveSelection();
				document.execCommand('formatBlock', false, 'blockquote');
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertCode() {
				const selection = window.getSelection();
				const text = selection.toString();
				
				if (text) {
					const code = document.createElement('code');
					code.textContent = text;
					const range = selection.getRangeAt(0);
					range.deleteContents();
					range.insertNode(code);
					
					// Position cursor after code
					const newRange = document.createRange();
					newRange.setStartAfter(code);
					newRange.setEndAfter(code);
					selection.removeAllRanges();
					selection.addRange(newRange);
				} else {
					const code = document.createElement('code');
					code.textContent = 'code';
					const range = selection.getRangeAt(0);
					range.insertNode(code);
					
					// Select the code text for editing
					const newRange = document.createRange();
					newRange.selectNodeContents(code);
					selection.removeAllRanges();
					selection.addRange(newRange);
				}
				
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertCodeBlock() {
				const range = saveSelection();
				const pre = document.createElement('pre');
				const code = document.createElement('code');
				code.textContent = 'console.log("Hello, Astro!");';
				pre.appendChild(code);
				
				if (range) {
					range.insertNode(pre);
					
					// Select the code text for editing
					const newRange = document.createRange();
					newRange.selectNodeContents(code);
					const selection = window.getSelection();
					selection.removeAllRanges();
					selection.addRange(newRange);
				}
				
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertTable() {
				const range = saveSelection();
				const table = document.createElement('table');
				
				// Create header row
				const thead = document.createElement('thead');
				const headerRow = document.createElement('tr');
				for (let i = 1; i <= 3; i++) {
					const th = document.createElement('th');
					th.textContent = `Header ${i}`;
					th.contentEditable = true;
					headerRow.appendChild(th);
				}
				thead.appendChild(headerRow);
				table.appendChild(thead);
				
				// Create body rows
				const tbody = document.createElement('tbody');
				for (let i = 1; i <= 2; i++) {
					const row = document.createElement('tr');
					for (let j = 1; j <= 3; j++) {
						const td = document.createElement('td');
						td.textContent = `Cell ${(i-1)*3 + j}`;
						td.contentEditable = true;
						row.appendChild(td);
					}
					tbody.appendChild(row);
				}
				table.appendChild(tbody);
				
				if (range) {
					range.insertNode(table);
					
					// Add some space after table
					const br = document.createElement('br');
					const newRange = document.createRange();
					newRange.setStartAfter(table);
					newRange.insertNode(br);
				}
				
				setTimeout(() => {
					document.getElementById('editor').focus();
					convertToMarkdown();
				}, 10);
			}

			function insertLink() {
				const url = prompt('Enter URL:');
				const text = prompt('Enter link text:') || url;
				if (url) {
					const range = saveSelection();
					const link = document.createElement('a');
					link.href = url;
					link.textContent = text;
					
					if (range) {
						range.insertNode(link);
						
						// Position cursor after link
						const newRange = document.createRange();
						newRange.setStartAfter(link);
						newRange.setEndAfter(link);
						const selection = window.getSelection();
						selection.removeAllRanges();
						selection.addRange(newRange);
					}
					
					setTimeout(() => {
						document.getElementById('editor').focus();
						convertToMarkdown();
					}, 10);
				}
			}

			function insertImage() {
				const url = prompt('Enter image URL:');
				const alt = prompt('Enter alt text:') || 'Image';
				if (url) {
					const range = saveSelection();
					const img = document.createElement('img');
					img.src = url;
					img.alt = alt;
					img.style.maxWidth = '100%';
					
					if (range) {
						range.insertNode(img);
						
						// Add space after image
						const br = document.createElement('br');
						const newRange = document.createRange();
						newRange.setStartAfter(img);
						newRange.insertNode(br);
					}
					
					setTimeout(() => {
						document.getElementById('editor').focus();
						convertToMarkdown();
					}, 10);
				}
			}

			// Table editing functions
			function addRowAbove() {
				if (!currentCell) return;
				const row = currentCell.parentElement;
				const newRow = row.cloneNode(true);
				
				// Clear content and make editable
				Array.from(newRow.children).forEach(cell => {
					cell.textContent = '';
					cell.contentEditable = true;
				});
				
				row.parentElement.insertBefore(newRow, row);
				hideTableMenu();
				convertToMarkdown();
			}

			function addRowBelow() {
				if (!currentCell) return;
				const row = currentCell.parentElement;
				const newRow = row.cloneNode(true);
				
				// Clear content and make editable
				Array.from(newRow.children).forEach(cell => {
					cell.textContent = '';
					cell.contentEditable = true;
				});
				
				row.parentElement.insertBefore(newRow, row.nextSibling);
				hideTableMenu();
				convertToMarkdown();
			}

			function addColumnLeft() {
				if (!currentCell) return;
				const cellIndex = Array.from(currentCell.parentElement.children).indexOf(currentCell);
				const table = currentTable;
				
				Array.from(table.querySelectorAll('tr')).forEach(row => {
					const newCell = row.children[0].tagName === 'TH' ? 
						document.createElement('th') : document.createElement('td');
					newCell.textContent = '';
					newCell.contentEditable = true;
					row.insertBefore(newCell, row.children[cellIndex]);
				});
				
				hideTableMenu();
				convertToMarkdown();
			}

			function addColumnRight() {
				if (!currentCell) return;
				const cellIndex = Array.from(currentCell.parentElement.children).indexOf(currentCell);
				const table = currentTable;
				
				Array.from(table.querySelectorAll('tr')).forEach(row => {
					const newCell = row.children[0].tagName === 'TH' ? 
						document.createElement('th') : document.createElement('td');
					newCell.textContent = '';
					newCell.contentEditable = true;
					row.insertBefore(newCell, row.children[cellIndex + 1]);
				});
				
				hideTableMenu();
				convertToMarkdown();
			}

			function deleteRow() {
				if (!currentCell) return;
				const row = currentCell.parentElement;
				if (row.parentElement.children.length > 1) {
					row.remove();
				}
				hideTableMenu();
				convertToMarkdown();
			}

			function deleteColumn() {
				if (!currentCell) return;
				const cellIndex = Array.from(currentCell.parentElement.children).indexOf(currentCell);
				const table = currentTable;
				
				if (table.querySelector('tr').children.length > 1) {
					Array.from(table.querySelectorAll('tr')).forEach(row => {
						if (row.children[cellIndex]) {
							row.children[cellIndex].remove();
						}
					});
				}
				
				hideTableMenu();
				convertToMarkdown();
			}

			function toggleHeader() {
				if (!currentCell) return;
				const row = currentCell.parentElement;
				const isHeader = currentCell.tagName === 'TH';
				
				Array.from(row.children).forEach(cell => {
					const newCell = document.createElement(isHeader ? 'td' : 'th');
					newCell.textContent = cell.textContent;
					newCell.contentEditable = true;
					row.replaceChild(newCell, cell);
				});
				
				hideTableMenu();
				convertToMarkdown();
			}

			function showTableMenu(e, cell, table) {
				currentCell = cell;
				currentTable = table;
				const menu = document.getElementById('table-menu');
				menu.style.display = 'block';
				menu.style.left = e.pageX + 'px';
				menu.style.top = e.pageY + 'px';
				e.preventDefault();
			}

			function hideTableMenu() {
				document.getElementById('table-menu').style.display = 'none';
				currentCell = null;
				currentTable = null;
			}

			// Markdown conversion functions
			function htmlToMarkdown(html) {
				const tempDiv = document.createElement('div');
				tempDiv.innerHTML = html;
				let markdown = processNode(tempDiv);
				markdown = markdown.replace(/\n{3,}/g, '\n\n').trim();
				return markdown;
			}

			function processNode(node) {
				let result = '';
				
				for (let child of node.childNodes) {
					if (child.nodeType === Node.TEXT_NODE) {
						result += child.textContent;
					} else if (child.nodeType === Node.ELEMENT_NODE) {
						result += processElement(child);
					}
				}
				
				return result;
			}

			function processElement(element) {
				const tagName = element.tagName.toLowerCase();
				const content = processNode(element);
				
				switch (tagName) {
					case 'h1': return `# ${content}\n\n`;
					case 'h2': return `## ${content}\n\n`;
					case 'h3': return `### ${content}\n\n`;
					case 'h4': return `#### ${content}\n\n`;
					case 'h5': return `##### ${content}\n\n`;
					case 'h6': return `###### ${content}\n\n`;
					
					case 'p': return `${content}\n\n`;
					case 'br': return '\n';
					
					case 'strong':
					case 'b': return `**${content}**`;
					
					case 'em':
					case 'i': return `*${content}*`;
					
					case 'u': return `<u>${content}</u>`;
					
					case 'code': return `\`${content}\``;
					
					case 'pre': 
						const codeContent = element.querySelector('code');
						if (codeContent) {
							return `\`\`\`\n${codeContent.textContent}\n\`\`\`\n\n`;
						}
						return `\`\`\`\n${content}\n\`\`\`\n\n`;
					
					case 'blockquote': return `> ${content.replace(/\n/g, '\n> ')}\n\n`;
					
					case 'ul':
						let ulResult = '';
						for (let li of element.children) {
							if (li.tagName.toLowerCase() === 'li') {
								ulResult += `- ${processNode(li).trim()}\n`;
							}
						}
						return ulResult + '\n';
					
					case 'ol':
						let olResult = '';
						let counter = 1;
						for (let li of element.children) {
							if (li.tagName.toLowerCase() === 'li') {
								olResult += `${counter}. ${processNode(li).trim()}\n`;
								counter++;
							}
						}
						return olResult + '\n';
					
					case 'table':
						return processTable(element);
					
					case 'a':
						const href = element.getAttribute('href') || '';
						return `[${content}](${href})`;
					
					case 'img':
						const src = element.getAttribute('src') || '';
						const alt = element.getAttribute('alt') || '';
						return `![${alt}](${src})`;
					
					case 'sub': return `<sub>${content}</sub>`;
					case 'sup': return `<sup>${content}</sup>`;
					case 'kbd': return `<kbd>${content}</kbd>`;
					case 'mark': return `<mark>${content}</mark>`;
					case 'abbr': 
						const title = element.getAttribute('title') || '';
						return `<abbr title="${title}">${content}</abbr>`;
					
					case 'div': return content + '\n\n';
					
					default: return content;
				}
			}

			function processTable(table) {
				let result = '';
				const rows = table.querySelectorAll('tr');
				
				if (rows.length === 0) return '';
				
				// Process all rows
				let hasHeader = false;
				for (let i = 0; i < rows.length; i++) {
					const cells = rows[i].querySelectorAll('td, th');
					const cellContents = Array.from(cells).map(cell => processNode(cell).trim());
					result += '| ' + cellContents.join(' | ') + ' |\n';
					
					// Add separator after first row if it contains headers
					if (i === 0 && rows[i].querySelector('th')) {
						result += '| ' + cellContents.map(() => '---').join(' | ') + ' |\n';
						hasHeader = true;
					}
				}
				
				// If no header was found, add separator after first row
				if (!hasHeader && rows.length > 0) {
					const firstRowCells = rows[0].querySelectorAll('td, th');
					const separatorLine = '| ' + Array.from(firstRowCells).map(() => '---').join(' | ') + ' |\n';
					const lines = result.split('\n');
					lines.splice(1, 0, separatorLine);
					result = lines.join('\n');
				}
				
				return result + '\n';
			}

			function convertToMarkdown() {
				const editor = document.getElementById('editor');
				const output = document.getElementById('markdown-output');
				
				const markdown = htmlToMarkdown(editor.innerHTML);
				output.textContent = markdown;
				
				if (currentTab === 'preview') {
					updatePreview(markdown);
				}
			}

			function updatePreview(markdown) {
				const preview = document.getElementById('preview-output');
				let html = markdown
					.replace(/^# (.*$)/gm, '<h1>$1</h1>')
					.replace(/^## (.*$)/gm, '<h2>$1</h2>')
					.replace(/^### (.*$)/gm, '<h3>$1</h3>')
					.replace(/^#### (.*$)/gm, '<h4>$1</h4>')
					.replace(/^##### (.*$)/gm, '<h5>$1</h5>')
					.replace(/^###### (.*$)/gm, '<h6>$1</h6>')
					.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
					.replace(/\*(.*?)\*/g, '<em>$1</em>')
					.replace(/`(.*?)`/g, '<code>$1</code>')
					.replace(/^> (.*$)/gm, '<blockquote>$1</blockquote>')
					.replace(/^- (.*$)/gm, '<li>$1</li>')
					.replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
					.replace(/\n\n/g, '</p><p>')
					.replace(/^(.*)$/gm, '<p>$1</p>');
				
				preview.innerHTML = html;
			}

			function switchTab(tab) {
				currentTab = tab;
				const markdownOutput = document.getElementById('markdown-output');
				const previewOutput = document.getElementById('preview-output');
				const tabButtons = document.querySelectorAll('.tab-btn');
				
				tabButtons.forEach(btn => btn.classList.remove('active'));
				
				if (tab === 'markdown') {
					markdownOutput.style.display = 'block';
					previewOutput.style.display = 'none';
					tabButtons[0].classList.add('active');
				} else {
					markdownOutput.style.display = 'none';
					previewOutput.style.display = 'block';
					tabButtons[1].classList.add('active');
					updatePreview(document.getElementById('markdown-output').textContent);
				}
			}

			function copyMarkdown() {
				const output = document.getElementById('markdown-output');
				navigator.clipboard.writeText(output.textContent).then(() => {
					const btn = document.querySelector('.copy-btn');
					const originalText = btn.textContent;
					btn.textContent = '‚úÖ Copied!';
					setTimeout(() => {
						btn.textContent = originalText;
					}, 2000);
				});
			}

			// Event listeners
			document.addEventListener('DOMContentLoaded', function() {
				const editor = document.getElementById('editor');
				
				// Convert to markdown on input
				editor.addEventListener('input', convertToMarkdown);
				
				// Table context menu
				editor.addEventListener('contextmenu', function(e) {
					const cell = e.target.closest('td, th');
					const table = e.target.closest('table');
					
					if (cell && table) {
						showTableMenu(e, cell, table);
					} else {
						hideTableMenu();
					}
				});
				
				// Hide table menu on click outside
				document.addEventListener('click', function(e) {
					if (!e.target.closest('#table-menu')) {
						hideTableMenu();
					}
				});
				
				// Auto-save to localStorage
				editor.addEventListener('input', () => {
					localStorage.setItem('astro-markdown-editor-content', editor.innerHTML);
				});

				// Load saved content
				const savedContent = localStorage.getItem('astro-markdown-editor-content');
				if (savedContent) {
					editor.innerHTML = savedContent;
				}
				
				// Initialize
				convertToMarkdown();
			});
		</script>
	</body>
</html>
