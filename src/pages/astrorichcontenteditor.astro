---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Astro Markdown Editor</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.snow.min.css" rel="stylesheet">
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: white;
            color: black;
            line-height: 1.6;
        }

        .header {
            background-color: #2337FF;
            color: white;
            padding: 1rem 2rem;
            text-align: center;
            border-bottom: 3px solid black;
        }

        .header h1 {
            font-size: 2rem;
            font-weight: 700;
        }

        .header p {
            margin-top: 0.5rem;
            opacity: 0.9;
        }

        .container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            height: calc(100vh - 120px);
            gap: 0;
        }

        .editor-panel, .output-panel {
            border-right: 2px solid black;
            display: flex;
            flex-direction: column;
        }

        .output-panel {
            border-right: none;
            border-left: 2px solid black;
        }

        .panel-header {
            background-color: black;
            color: white;
            padding: 1rem;
            font-weight: 600;
            font-size: 1.1rem;
            border-bottom: 2px solid #2337FF;
        }

        .editor-content {
            flex: 1;
            overflow: hidden;
        }

        #editor {
            height: 100%;
            border: none;
        }

        .ql-toolbar {
            border: none !important;
            border-bottom: 2px solid black !important;
            background-color: #f8f9fa;
        }

        .ql-container {
            border: none !important;
            font-size: 16px;
            height: calc(100% - 42px);
        }

        .ql-editor {
            padding: 1.5rem;
            line-height: 1.6;
        }

        .ql-toolbar .ql-stroke {
            stroke: black;
        }

        .ql-toolbar .ql-fill {
            fill: black;
        }

        .ql-toolbar button:hover .ql-stroke {
            stroke: #2337FF;
        }

        .ql-toolbar button:hover .ql-fill {
            fill: #2337FF;
        }

        .ql-toolbar button.ql-active .ql-stroke {
            stroke: #2337FF;
        }

        .ql-toolbar button.ql-active .ql-fill {
            fill: #2337FF;
        }

        .output-content {
            flex: 1;
            padding: 1.5rem;
            background-color: #f8f9fa;
            overflow-y: auto;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        .toolbar-actions {
            padding: 1rem;
            background-color: black;
            display: flex;
            gap: 1rem;
            justify-content: center;
            border-top: 2px solid #2337FF;
        }

        .btn {
            background-color: #2337FF;
            color: white;
            border: 2px solid black;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.2s;
        }

        .btn:hover {
            background-color: white;
            color: #2337FF;
            border-color: #2337FF;
        }

        .stats {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.5rem 1rem;
            background-color: #f8f9fa;
            border-top: 1px solid black;
            font-size: 0.875rem;
            color: #666;
        }

        @media (max-width: 768px) {
            .container {
                grid-template-columns: 1fr;
                grid-template-rows: 1fr 1fr;
            }
            
            .editor-panel, .output-panel {
                border-right: none;
                border-left: none;
            }
            
            .output-panel {
                border-top: 2px solid black;
            }
        }

        .preview-mode {
            background-color: white;
            border: 1px solid #ddd;
            border-radius: 4px;
            padding: 1rem;
            margin-top: 1rem;
        }

        .preview-mode h1, .preview-mode h2, .preview-mode h3,
        .preview-mode h4, .preview-mode h5, .preview-mode h6 {
            margin-top: 1.5rem;
            margin-bottom: 0.5rem;
        }

        .preview-mode h1 { font-size: 2rem; }
        .preview-mode h2 { font-size: 1.75rem; }
        .preview-mode h3 { font-size: 1.5rem; }
        .preview-mode h4 { font-size: 1.25rem; }
        .preview-mode h5 { font-size: 1.1rem; }
        .preview-mode h6 { font-size: 1rem; }

        .preview-mode blockquote {
            border-left: 4px solid #2337FF;
            margin: 1rem 0;
            padding-left: 1rem;
            color: #666;
        }

        .preview-mode code {
            background-color: #f8f9fa;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: monospace;
        }

        .preview-mode pre {
            background-color: #f8f9fa;
            padding: 1rem;
            border-radius: 4px;
            overflow-x: auto;
        }

        .preview-mode table {
            border-collapse: collapse;
            width: 100%;
            margin: 1rem 0;
        }

        .preview-mode th, .preview-mode td {
            border: 1px solid #ddd;
            padding: 0.5rem;
            text-align: left;
        }

        .preview-mode th {
            background-color: #f8f9fa;
            font-weight: 600;
        }
    </style>
</head>
<body>
<Footer />
    <header class="header">
        <h1>Astro Markdown Editor</h1>
        <p>Create rich content and convert it to Astro-compatible markdown instantly</p>
    </header>

    <div class="container">
        <div class="editor-panel">
            <div class="panel-header">Rich Text Editor</div>
            <div class="editor-content">
                <div id="editor"></div>
            </div>
            <div class="stats">
                <span>Words: <span id="word-count">0</span></span>
                <span>Characters: <span id="char-count">0</span></span>
            </div>
        </div>

        <div class="output-panel">
            <div class="panel-header">Markdown Output</div>
            <div class="output-content" id="markdown-output">Start typing in the editor to see markdown output...</div>
            <div class="toolbar-actions">
                <button class="btn" onclick="copyMarkdown()">Copy Markdown</button>
                <button class="btn" onclick="togglePreview()">Toggle Preview</button>
                <button class="btn" onclick="clearEditor()">Clear All</button>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/quill/1.3.7/quill.min.js"></script>
    <script>
        let quill;
        let isPreviewMode = false;

        // Initialize Quill editor
        function initializeEditor() {
            const toolbarOptions = [
                [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
                ['bold', 'italic', 'underline', 'strike'],
                [{ 'list': 'ordered'}, { 'list': 'bullet' }],
                [{ 'indent': '-1'}, { 'indent': '+1' }],
                ['blockquote', 'code-block'],
                ['link', 'image'],
                [{ 'align': [] }],
                ['clean']
            ];

            quill = new Quill('#editor', {
                theme: 'snow',
                modules: {
                    toolbar: toolbarOptions
                },
                placeholder: 'Start writing your content here...\n\nSupported features:\n• Headings (H1-H6)\n• Bold, italic, underline\n• Lists (ordered & unordered)\n• Blockquotes\n• Code blocks\n• Links and images\n• Tables (use toolbar or paste)\n• And more!'
            });

            // Listen for content changes
            quill.on('text-change', function() {
                convertToMarkdown();
                updateStats();
            });

            // Initial conversion
            convertToMarkdown();
        }

        // Convert Quill content to Markdown
        function convertToMarkdown() {
            const delta = quill.getContents();
            const text = quill.getText();
            
            if (!text.trim()) {
                document.getElementById('markdown-output').textContent = 'Start typing in the editor to see markdown output...';
                return;
            }

            let markdown = '';
            let currentLine = '';
            let inList = false;
            let listType = '';
            let listDepth = 0;
            
            delta.ops.forEach((op, index) => {
                if (typeof op.insert === 'string') {
                    const text = op.insert;
                    const attrs = op.attributes || {};
                    
                    // Handle different formatting
                    let formattedText = text;
                    
                    // Apply inline formatting
                    if (attrs.bold && attrs.italic) {
                        formattedText = `***${text}***`;
                    } else if (attrs.bold) {
                        formattedText = `**${text}**`;
                    } else if (attrs.italic) {
                        formattedText = `*${text}*`;
                    }
                    
                    if (attrs.underline) {
                        formattedText = `<u>${formattedText}</u>`;
                    }
                    
                    if (attrs.strike) {
                        formattedText = `~~${formattedText}~~`;
                    }
                    
                    if (attrs.code) {
                        formattedText = `\`${text}\``;
                    }
                    
                    if (attrs.link) {
                        formattedText = `[${text}](${attrs.link})`;
                    }
                    
                    // Handle line breaks and block formatting
                    if (text.includes('\n')) {
                        const lines = text.split('\n');
                        
                        lines.forEach((line, lineIndex) => {
                            if (lineIndex > 0 || currentLine) {
                                // Process the current line with its formatting
                                let processedLine = currentLine + (lineIndex === 0 ? formattedText.split('\n')[0] : line);
                                
                                // Apply block formatting based on next op attributes
                                const nextOp = delta.ops[index + 1];
                                const blockAttrs = nextOp?.attributes || {};
                                
                                if (blockAttrs.header) {
                                    processedLine = '#'.repeat(blockAttrs.header) + ' ' + processedLine;
                                } else if (blockAttrs.blockquote) {
                                    processedLine = '> ' + processedLine;
                                } else if (blockAttrs['code-block']) {
                                    if (!markdown.endsWith('```\n')) {
                                        markdown += '```\n';
                                    }
                                    processedLine = processedLine;
                                    if (index === delta.ops.length - 1 || !delta.ops[index + 1]?.attributes?.['code-block']) {
                                        processedLine += '\n```';
                                    }
                                } else if (blockAttrs.list) {
                                    const indent = '  '.repeat(blockAttrs.indent || 0);
                                    if (blockAttrs.list === 'ordered') {
                                        processedLine = indent + '1. ' + processedLine;
                                    } else {
                                        processedLine = indent + '- ' + processedLine;
                                    }
                                }
                                
                                markdown += processedLine + '\n';
                                currentLine = '';
                            }
                            
                            if (lineIndex < lines.length - 1) {
                                currentLine += lines[lineIndex + 1];
                            }
                        });
                    } else {
                        currentLine += formattedText;
                    }
                }
            });
            
            // Add any remaining current line
            if (currentLine.trim()) {
                markdown += currentLine + '\n';
            }
            
            // Clean up the markdown
            markdown = markdown
                .replace(/\n{3,}/g, '\n\n') // Remove excessive line breaks
                .replace(/^\n+/, '') // Remove leading newlines
                .replace(/\n+$/, '\n'); // Clean trailing newlines
            
            displayOutput(markdown);
        }

        // Display output (markdown or preview)
        function displayOutput(markdown) {
            const outputElement = document.getElementById('markdown-output');
            
            if (isPreviewMode) {
                // Convert markdown to HTML for preview
                outputElement.innerHTML = `<div class="preview-mode">${markdownToHtml(markdown)}</div>`;
            } else {
                outputElement.textContent = markdown || 'Start typing in the editor to see markdown output...';
            }
        }

        // Simple markdown to HTML converter for preview
        function markdownToHtml(markdown) {
            let html = markdown;
            
            // Headers
            html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
            html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
            html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
            html = html.replace(/^#### (.*$)/gm, '<h4>$1</h4>');
            html = html.replace(/^##### (.*$)/gm, '<h5>$1</h5>');
            html = html.replace(/^###### (.*$)/gm, '<h6>$1</h6>');
            
            // Bold, italic
            html = html.replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>');
            html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
            
            // Strikethrough
            html = html.replace(/~~(.*?)~~/g, '<del>$1</del>');
            
            // Code
            html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            // Links
            html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
            
            // Lists
            html = html.replace(/^\- (.+)/gm, '<li>$1</li>');
            html = html.replace(/^(\d+)\. (.+)/gm, '<li>$2</li>');
            
            // Blockquotes
            html = html.replace(/^> (.+)/gm, '<blockquote>$1</blockquote>');
            
            // Line breaks
            html = html.replace(/\n/g, '<br>');
            
            return html;
        }

        // Update statistics
        function updateStats() {
            const text = quill.getText();
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
            const charCount = text.length;
            
            document.getElementById('word-count').textContent = wordCount;
            document.getElementById('char-count').textContent = charCount;
        }

        // Copy markdown to clipboard
        function copyMarkdown() {
            const markdownText = document.getElementById('markdown-output').textContent;
            
            if (markdownText && markdownText !== 'Start typing in the editor to see markdown output...') {
                navigator.clipboard.writeText(markdownText).then(() => {
                    // Visual feedback
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.style.backgroundColor = '#28a745';
                    
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.style.backgroundColor = '#2337FF';
                    }, 2000);
                }).catch(() => {
                    alert('Failed to copy to clipboard');
                });
            } else {
                alert('No content to copy');
            }
        }

        // Toggle between markdown and preview mode
        function togglePreview() {
            isPreviewMode = !isPreviewMode;
            const btn = event.target;
            
            if (isPreviewMode) {
                btn.textContent = 'Show Markdown';
                document.querySelector('.output-panel .panel-header').textContent = 'Preview Mode';
            } else {
                btn.textContent = 'Toggle Preview';
                document.querySelector('.output-panel .panel-header').textContent = 'Markdown Output';
            }
            
            convertToMarkdown(); // Refresh output
        }

        // Clear editor content
        function clearEditor() {
            if (confirm('Are you sure you want to clear all content?')) {
                quill.setContents([]);
                convertToMarkdown();
                updateStats();
            }
        }

        // Initialize editor when page loads
        document.addEventListener('DOMContentLoaded', function() {
            initializeEditor();
            updateStats();
        });

        // Sample content insertion for demonstration
        function insertSampleContent() {
            const sampleDelta = {
                ops: [
                    { insert: 'Welcome to Astro Markdown Editor', attributes: { header: 1 } },
                    { insert: '\n\nThis is a ' },
                    { insert: 'powerful markdown editor', attributes: { bold: true } },
                    { insert: ' that converts your rich text into ' },
                    { insert: 'Astro-compatible markdown', attributes: { italic: true } },
                    { insert: '.\n\nFeatures include:\n' },
                    { insert: 'Rich text editing with Quill.js', attributes: { list: 'bullet' } },
                    { insert: '\n' },
                    { insert: 'Real-time markdown conversion', attributes: { list: 'bullet' } },
                    { insert: '\n' },
                    { insert: 'Preview mode', attributes: { list: 'bullet' } },
                    { insert: '\n' },
                    { insert: 'Copy to clipboard functionality', attributes: { list: 'bullet' } },
                    { insert: '\n\n' },
                    { insert: 'Here\'s a code snippet:', attributes: { header: 2 } },
                    { insert: '\n\nconst astro = "awesome";\nconsole.log(astro);', attributes: { 'code-block': true } },
                    { insert: '\n\nAnd a blockquote:' },
                    { insert: '\nAstro is the web framework for content-driven websites.', attributes: { blockquote: true } },
                    { insert: '\n' }
                ]
            };
            
            quill.setContents(sampleDelta);
            convertToMarkdown();
            updateStats();
        }
    </script>
<Footer />
</body>
</html>
