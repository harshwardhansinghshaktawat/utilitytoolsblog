---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Astro Blog Editor</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f5;
            color: black;
            line-height: 1.6;
        }

        .header {
            background-color: #2337FF;
            color: white;
            padding: 1rem 2rem;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .header h1 {
            font-size: 1.8rem;
            font-weight: 600;
        }

        .container {
            max-width: 1400px;
            margin: 2rem auto;
            padding: 0 1rem;
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 2rem;
            height: calc(100vh - 140px);
        }

        .editor-section, .output-section {
            background: white;
            border-radius: 8px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .section-header {
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            padding: 1rem 1.5rem;
            font-weight: 600;
            color: #495057;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .mode-tabs {
            display: flex;
            gap: 0.5rem;
        }

        .tab {
            padding: 0.5rem 1rem;
            background: #e9ecef;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.875rem;
            transition: all 0.2s;
        }

        .tab.active {
            background: #2337FF;
            color: white;
        }

        .tab:hover:not(.active) {
            background: #dee2e6;
        }

        /* WordPress-style Toolbar */
        .toolbar {
            background: #f8f9fa;
            border-bottom: 1px solid #e9ecef;
            padding: 0.75rem 1rem;
            display: flex;
            flex-wrap: wrap;
            gap: 0.25rem;
            align-items: center;
        }

        .toolbar-group {
            display: flex;
            gap: 0.25rem;
            margin-right: 0.75rem;
            padding-right: 0.75rem;
            border-right: 1px solid #dee2e6;
        }

        .toolbar-group:last-child {
            border-right: none;
            margin-right: 0;
        }

        .toolbar-btn {
            background: white;
            border: 1px solid #ced4da;
            border-radius: 3px;
            padding: 0.4rem 0.6rem;
            cursor: pointer;
            font-size: 0.875rem;
            font-weight: 500;
            transition: all 0.15s;
            min-width: 32px;
            height: 32px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .toolbar-btn:hover {
            background: #e9ecef;
            border-color: #adb5bd;
        }

        .toolbar-btn.active {
            background: #2337FF;
            color: white;
            border-color: #2337FF;
        }

        .toolbar-select {
            background: white;
            border: 1px solid #ced4da;
            border-radius: 3px;
            padding: 0.4rem 0.6rem;
            font-size: 0.875rem;
            cursor: pointer;
            min-width: 100px;
        }

        .toolbar-select:focus {
            outline: none;
            border-color: #2337FF;
            box-shadow: 0 0 0 2px rgba(35, 55, 255, 0.2);
        }

        /* Editor */
        .editor {
            flex: 1;
            padding: 1.5rem;
            font-size: 16px;
            line-height: 1.6;
            border: none;
            outline: none;
            overflow-y: auto;
            min-height: 300px;
            background: white;
        }

        .editor:focus {
            outline: none;
        }

        .editor h1, .editor h2, .editor h3, .editor h4, .editor h5, .editor h6 {
            margin: 1.5rem 0 0.5rem 0;
            font-weight: 600;
        }

        .editor h1 { font-size: 2rem; }
        .editor h2 { font-size: 1.75rem; }
        .editor h3 { font-size: 1.5rem; }
        .editor h4 { font-size: 1.25rem; }
        .editor h5 { font-size: 1.1rem; }
        .editor h6 { font-size: 1rem; }

        .editor p {
            margin: 1rem 0;
        }

        .editor blockquote {
            border-left: 4px solid #2337FF;
            margin: 1rem 0;
            padding-left: 1rem;
            color: #6c757d;
            background: #f8f9fa;
            padding: 1rem;
        }

        .editor ul, .editor ol {
            margin: 1rem 0;
            padding-left: 2rem;
        }

        .editor li {
            margin: 0.5rem 0;
        }

        .editor code {
            background: #f8f9fa;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
        }

        .editor pre {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 4px;
            overflow-x: auto;
            margin: 1rem 0;
            border: 1px solid #e9ecef;
        }

        .editor pre code {
            background: none;
            padding: 0;
        }

        .editor a {
            color: #2337FF;
            text-decoration: underline;
        }

        /* Output */
        .output {
            flex: 1;
            padding: 1.5rem;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            font-size: 14px;
            line-height: 1.5;
            background: #f8f9fa;
            border: none;
            outline: none;
            overflow-y: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }

        /* Stats */
        .stats {
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            padding: 0.75rem 1.5rem;
            font-size: 0.875rem;
            color: #6c757d;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .actions {
            background: #f8f9fa;
            border-top: 1px solid #e9ecef;
            padding: 1rem 1.5rem;
            display: flex;
            gap: 0.75rem;
            justify-content: center;
        }

        .btn {
            background: #2337FF;
            color: white;
            border: none;
            border-radius: 4px;
            padding: 0.5rem 1rem;
            cursor: pointer;
            font-weight: 500;
            transition: all 0.2s;
        }

        .btn:hover {
            background: #1e2ecc;
        }

        .btn.secondary {
            background: #6c757d;
        }

        .btn.secondary:hover {
            background: #5a6268;
        }

        /* Preview Mode */
        .preview {
            flex: 1;
            padding: 1.5rem;
            overflow-y: auto;
            background: white;
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
        }

        .preview h1, .preview h2, .preview h3, .preview h4, .preview h5, .preview h6 {
            margin: 1.5rem 0 0.5rem 0;
            font-weight: 600;
        }

        .preview h1 { font-size: 2rem; color: #2337FF; }
        .preview h2 { font-size: 1.75rem; color: #2337FF; }
        .preview h3 { font-size: 1.5rem; }
        .preview h4 { font-size: 1.25rem; }
        .preview h5 { font-size: 1.1rem; }
        .preview h6 { font-size: 1rem; }

        .preview p {
            margin: 1rem 0;
        }

        .preview blockquote {
            border-left: 4px solid #2337FF;
            margin: 1rem 0;
            padding: 1rem;
            background: #f8f9fa;
            color: #6c757d;
        }

        .preview ul, .preview ol {
            margin: 1rem 0;
            padding-left: 2rem;
        }

        .preview li {
            margin: 0.5rem 0;
        }

        .preview code {
            background: #f8f9fa;
            padding: 0.2rem 0.4rem;
            border-radius: 3px;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 0.9em;
        }

        .preview pre {
            background: #f8f9fa;
            padding: 1rem;
            border-radius: 4px;
            overflow-x: auto;
            margin: 1rem 0;
            border: 1px solid #e9ecef;
        }

        .preview pre code {
            background: none;
            padding: 0;
        }

        .preview a {
            color: #2337FF;
            text-decoration: underline;
        }

        .preview strong {
            font-weight: 600;
        }

        .preview em {
            font-style: italic;
        }

        /* Responsive */
        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
                grid-template-rows: 1fr 1fr;
                gap: 1rem;
            }
        }

        @media (max-width: 768px) {
            .toolbar {
                padding: 0.5rem;
            }
            
            .toolbar-group {
                margin-right: 0.5rem;
                padding-right: 0.5rem;
            }
            
            .container {
                margin: 1rem auto;
                padding: 0 0.5rem;
            }
        }

        /* Utility classes */
        .hidden {
            display: none;
        }

        /* Animation for copy feedback */
        .copy-success {
            background: #28a745 !important;
        }
    </style>
</head>
<body>
    <header class="header">
        <h1>Astro Blog Editor</h1>
    </header>

    <div class="container">
        <!-- Editor Section -->
        <div class="editor-section">
            <div class="section-header">
                <span>Rich Text Editor</span>
                <div class="mode-tabs">
                    <button class="tab active" onclick="switchEditorMode('visual')">Visual</button>
                    <button class="tab" onclick="switchEditorMode('text')">Text</button>
                </div>
            </div>

            <!-- Toolbar -->
            <div class="toolbar">
                <div class="toolbar-group">
                    <select class="toolbar-select" id="formatSelect" onchange="formatBlock()">
                        <option value="">Paragraph</option>
                        <option value="h1">Heading 1</option>
                        <option value="h2">Heading 2</option>
                        <option value="h3">Heading 3</option>
                        <option value="h4">Heading 4</option>
                        <option value="h5">Heading 5</option>
                        <option value="h6">Heading 6</option>
                    </select>
                </div>

                <div class="toolbar-group">
                    <button class="toolbar-btn" onclick="format('bold')" title="Bold (Ctrl+B)">
                        <strong>B</strong>
                    </button>
                    <button class="toolbar-btn" onclick="format('italic')" title="Italic (Ctrl+I)">
                        <em>I</em>
                    </button>
                    <button class="toolbar-btn" onclick="format('underline')" title="Underline (Ctrl+U)">
                        <u>U</u>
                    </button>
                    <button class="toolbar-btn" onclick="format('strikeThrough')" title="Strikethrough">
                        <s>S</s>
                    </button>
                </div>

                <div class="toolbar-group">
                    <button class="toolbar-btn" onclick="format('insertUnorderedList')" title="Bullet List">
                        • List
                    </button>
                    <button class="toolbar-btn" onclick="format('insertOrderedList')" title="Numbered List">
                        1. List
                    </button>
                    <button class="toolbar-btn" onclick="insertBlockquote()" title="Blockquote">
                        Quote
                    </button>
                </div>

                <div class="toolbar-group">
                    <button class="toolbar-btn" onclick="insertLink()" title="Insert Link">
                        Link
                    </button>
                    <button class="toolbar-btn" onclick="insertCode()" title="Inline Code">
                        Code
                    </button>
                    <button class="toolbar-btn" onclick="insertCodeBlock()" title="Code Block">
                        { }
                    </button>
                </div>

                <div class="toolbar-group">
                    <button class="toolbar-btn" onclick="format('undo')" title="Undo (Ctrl+Z)">
                        ↶
                    </button>
                    <button class="toolbar-btn" onclick="format('redo')" title="Redo (Ctrl+Y)">
                        ↷
                    </button>
                </div>
            </div>

            <!-- Editor -->
            <div class="editor" id="editor" contenteditable="true" 
                 placeholder="Start writing your blog post here..."
                 oninput="updateMarkdown()" 
                 onkeydown="handleKeydown(event)"
                 onkeyup="updateToolbar()">
                <p>Start writing your Astro blog post here...</p>
            </div>

            <!-- Stats -->
            <div class="stats">
                <span>Words: <span id="wordCount">0</span></span>
                <span>Characters: <span id="charCount">0</span></span>
                <span>Paragraphs: <span id="paraCount">0</span></span>
            </div>
        </div>

        <!-- Output Section -->
        <div class="output-section">
            <div class="section-header">
                <span id="outputTitle">Markdown Output</span>
                <div class="mode-tabs">
                    <button class="tab active" onclick="switchOutputMode('markdown')">Markdown</button>
                    <button class="tab" onclick="switchOutputMode('preview')">Preview</button>
                </div>
            </div>

            <!-- Output -->
            <div class="output" id="markdownOutput">Start writing to see your Astro markdown...</div>
            <div class="preview hidden" id="previewOutput">Start writing to see preview...</div>

            <!-- Actions -->
            <div class="actions">
                <button class="btn" onclick="copyMarkdown()">Copy Markdown</button>
                <button class="btn secondary" onclick="clearEditor()">Clear</button>
                <button class="btn secondary" onclick="loadDemo()">Load Demo</button>
            </div>
        </div>
    </div>

    <script>
        let currentOutputMode = 'markdown';
        let currentEditorMode = 'visual';

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            updateMarkdown();
            updateStats();
            
            // Focus editor
            document.getElementById('editor').focus();
        });

        // Switch editor mode (Visual/Text)
        function switchEditorMode(mode) {
            const editor = document.getElementById('editor');
            const tabs = document.querySelectorAll('.editor-section .tab');
            
            tabs.forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            if (mode === 'text') {
                // Switch to text mode - show HTML
                const html = editor.innerHTML;
                editor.style.fontFamily = 'Monaco, Menlo, monospace';
                editor.style.fontSize = '14px';
                editor.style.whiteSpace = 'pre-wrap';
                editor.textContent = html;
            } else {
                // Switch to visual mode
                const text = editor.textContent;
                editor.style.fontFamily = '';
                editor.style.fontSize = '';
                editor.style.whiteSpace = '';
                editor.innerHTML = text;
            }
            
            currentEditorMode = mode;
            updateMarkdown();
        }

        // Switch output mode (Markdown/Preview)
        function switchOutputMode(mode) {
            const markdownOutput = document.getElementById('markdownOutput');
            const previewOutput = document.getElementById('previewOutput');
            const outputTitle = document.getElementById('outputTitle');
            const tabs = document.querySelectorAll('.output-section .tab');
            
            tabs.forEach(tab => tab.classList.remove('active'));
            event.target.classList.add('active');
            
            if (mode === 'preview') {
                markdownOutput.classList.add('hidden');
                previewOutput.classList.remove('hidden');
                outputTitle.textContent = 'Preview';
            } else {
                markdownOutput.classList.remove('hidden');
                previewOutput.classList.add('hidden');
                outputTitle.textContent = 'Markdown Output';
            }
            
            currentOutputMode = mode;
            updateMarkdown();
        }

        // Format text
        function format(command, value = null) {
            document.execCommand(command, false, value);
            updateMarkdown();
            updateToolbar();
        }

        // Format block (headings)
        function formatBlock() {
            const select = document.getElementById('formatSelect');
            const value = select.value;
            
            if (value) {
                format('formatBlock', value);
            } else {
                format('formatBlock', 'p');
            }
            
            select.value = '';
        }

        // Insert blockquote
        function insertBlockquote() {
            format('formatBlock', 'blockquote');
        }

        // Insert link
        function insertLink() {
            const url = prompt('Enter URL:');
            if (url) {
                format('createLink', url);
            }
        }

        // Insert inline code
        function insertCode() {
            const selection = window.getSelection();
            if (selection.toString()) {
                format('insertHTML', `<code>${selection.toString()}</code>`);
            } else {
                format('insertHTML', '<code>code</code>');
            }
        }

        // Insert code block
        function insertCodeBlock() {
            const code = prompt('Enter code:') || 'Your code here';
            format('insertHTML', `<pre><code>${code}</code></pre>`);
        }

        // Handle keyboard shortcuts
        function handleKeydown(event) {
            if (event.ctrlKey || event.metaKey) {
                switch (event.key) {
                    case 'b':
                        event.preventDefault();
                        format('bold');
                        break;
                    case 'i':
                        event.preventDefault();
                        format('italic');
                        break;
                    case 'u':
                        event.preventDefault();
                        format('underline');
                        break;
                    case 'z':
                        event.preventDefault();
                        format('undo');
                        break;
                    case 'y':
                        event.preventDefault();
                        format('redo');
                        break;
                }
            }
            
            // Auto-update after keydown
            setTimeout(() => {
                updateMarkdown();
                updateStats();
            }, 10);
        }

        // Update toolbar state
        function updateToolbar() {
            const commands = ['bold', 'italic', 'underline', 'strikeThrough'];
            const buttons = document.querySelectorAll('.toolbar-btn');
            
            buttons.forEach(button => {
                button.classList.remove('active');
            });
            
            commands.forEach((command, index) => {
                if (document.queryCommandState(command)) {
                    buttons[index + 1]?.classList.add('active'); // +1 to skip format select
                }
            });
        }

        // Convert HTML to Markdown
        function htmlToMarkdown(html) {
            // Create a temporary element
            const temp = document.createElement('div');
            temp.innerHTML = html;
            
            let markdown = '';
            
            function processNode(node) {
                if (node.nodeType === Node.TEXT_NODE) {
                    return node.textContent;
                }
                
                if (node.nodeType === Node.ELEMENT_NODE) {
                    const tagName = node.tagName.toLowerCase();
                    const textContent = Array.from(node.childNodes).map(processNode).join('');
                    
                    switch (tagName) {
                        case 'h1': return `# ${textContent}\n\n`;
                        case 'h2': return `## ${textContent}\n\n`;
                        case 'h3': return `### ${textContent}\n\n`;
                        case 'h4': return `#### ${textContent}\n\n`;
                        case 'h5': return `##### ${textContent}\n\n`;
                        case 'h6': return `###### ${textContent}\n\n`;
                        case 'p': return textContent ? `${textContent}\n\n` : '';
                        case 'br': return '\n';
                        case 'strong': 
                        case 'b': return `**${textContent}**`;
                        case 'em': 
                        case 'i': return `*${textContent}*`;
                        case 'u': return `<u>${textContent}</u>`;
                        case 's':
                        case 'strike': return `~~${textContent}~~`;
                        case 'code': return `\`${textContent}\``;
                        case 'pre': return `\`\`\`\n${textContent}\n\`\`\`\n\n`;
                        case 'blockquote': return `> ${textContent}\n\n`;
                        case 'a': 
                            const href = node.getAttribute('href') || '#';
                            return `[${textContent}](${href})`;
                        case 'ul':
                            return processListItems(node, false);
                        case 'ol':
                            return processListItems(node, true);
                        case 'li':
                            return textContent; // Handled by parent ul/ol
                        case 'div':
                            return textContent + '\n\n';
                        default:
                            return textContent;
                    }
                }
                
                return '';
            }
            
            function processListItems(listNode, isOrdered) {
                let result = '';
                const items = listNode.querySelectorAll('li');
                
                items.forEach((item, index) => {
                    const content = Array.from(item.childNodes).map(processNode).join('').trim();
                    if (content) {
                        if (isOrdered) {
                            result += `${index + 1}. ${content}\n`;
                        } else {
                            result += `- ${content}\n`;
                        }
                    }
                });
                
                return result + '\n';
            }
            
            Array.from(temp.childNodes).forEach(node => {
                markdown += processNode(node);
            });
            
            // Clean up markdown
            return markdown
                .replace(/\n{3,}/g, '\n\n')
                .replace(/^\n+/, '')
                .replace(/\n+$/, '\n')
                .trim();
        }

        // Convert markdown to HTML for preview
        function markdownToHtml(markdown) {
            let html = markdown;
            
            // Code blocks first
            html = html.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
            
            // Headers
            html = html.replace(/^###### (.*$)/gm, '<h6>$1</h6>');
            html = html.replace(/^##### (.*$)/gm, '<h5>$1</h5>');
            html = html.replace(/^#### (.*$)/gm, '<h4>$1</h4>');
            html = html.replace(/^### (.*$)/gm, '<h3>$1</h3>');
            html = html.replace(/^## (.*$)/gm, '<h2>$1</h2>');
            html = html.replace(/^# (.*$)/gm, '<h1>$1</h1>');
            
            // Bold and italic
            html = html.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
            html = html.replace(/\*(.*?)\*/g, '<em>$1</em>');
            html = html.replace(/~~(.*?)~~/g, '<s>$1</s>');
            
            // Inline code
            html = html.replace(/`([^`]+)`/g, '<code>$1</code>');
            
            // Links
            html = html.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');
            
            // Blockquotes
            html = html.replace(/^> (.+)/gm, '<blockquote>$1</blockquote>');
            
            // Lists
            html = html.replace(/^\d+\. (.+)/gm, '<li>$1</li>');
            html = html.replace(/^- (.+)/gm, '<li>$1</li>');
            
            // Wrap list items
            html = html.replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>');
            
            // Paragraphs
            const paragraphs = html.split(/\n\s*\n/);
            html = paragraphs.map(p => {
                p = p.trim();
                if (!p) return '';
                
                if (p.startsWith('<h') || p.startsWith('<ul>') || p.startsWith('<ol>') || 
                    p.startsWith('<blockquote>') || p.startsWith('<pre>')) {
                    return p;
                }
                
                return `<p>${p}</p>`;
            }).join('\n\n');
            
            return html;
        }

        // Update markdown output
        function updateMarkdown() {
            const editor = document.getElementById('editor');
            const markdownOutput = document.getElementById('markdownOutput');
            const previewOutput = document.getElementById('previewOutput');
            
            let content = '';
            if (currentEditorMode === 'visual') {
                content = editor.innerHTML;
            } else {
                content = editor.textContent;
            }
            
            if (!content || content === '<p>Start writing your Astro blog post here...</p>') {
                markdownOutput.textContent = 'Start writing to see your Astro markdown...';
                previewOutput.innerHTML = '<p>Start writing to see preview...</p>';
                return;
            }
            
            const markdown = htmlToMarkdown(content);
            markdownOutput.textContent = markdown;
            
            if (currentOutputMode === 'preview') {
                previewOutput.innerHTML = markdownToHtml(markdown);
            }
        }

        // Update stats
        function updateStats() {
            const editor = document.getElementById('editor');
            const text = editor.textContent || '';
            
            const wordCount = text.trim() ? text.trim().split(/\s+/).length : 0;
            const charCount = text.length;
            const paraCount = (text.match(/\n\s*\n/g) || []).length + 1;
            
            document.getElementById('wordCount').textContent = wordCount;
            document.getElementById('charCount').textContent = charCount;
            document.getElementById('paraCount').textContent = Math.max(1, paraCount);
        }

        // Copy markdown
        function copyMarkdown() {
            const markdownOutput = document.getElementById('markdownOutput');
            const text = markdownOutput.textContent;
            
            if (text && text !== 'Start writing to see your Astro markdown...') {
                navigator.clipboard.writeText(text).then(() => {
                    const btn = event.target;
                    const originalText = btn.textContent;
                    btn.textContent = 'Copied!';
                    btn.classList.add('copy-success');
                    
                    setTimeout(() => {
                        btn.textContent = originalText;
                        btn.classList.remove('copy-success');
                    }, 2000);
                });
            }
        }

        // Clear editor
        function clearEditor() {
            if (confirm('Clear all content?')) {
                document.getElementById('editor').innerHTML = '<p>Start writing your Astro blog post here...</p>';
                updateMarkdown();
                updateStats();
            }
        }

        // Load demo content
        function loadDemo() {
            const demoContent = `
                <h1>Welcome to My Astro Blog</h1>
                <p>This is a <strong>comprehensive example</strong> of how to create <em>amazing content</em> for your Astro website using our custom editor.</p>
                
                <h2>Why Choose Astro?</h2>
                <p>Astro is the perfect framework for content-driven websites. Here's why developers love it:</p>
                
                <ul>
                    <li><strong>Lightning fast</strong> - Ships zero JavaScript by default</li>
                    <li><em>Framework agnostic</em> - Use React, Vue, Svelte, or any framework</li>
                    <li>Built-in <code>markdown support</code> and content collections</li>
                    <li>Automatic performance optimizations</li>
                </ul>
                
                <h3>Getting Started</h3>
                <p>Here's a simple Astro component example:</p>
                
                <pre><code>---
// Component script
const title = "Hello Astro!";
const items = ["Fast", "Flexible", "Fun"];
---
&lt;h1&gt;{title}&lt;/h1&gt;
&lt;ul&gt;
  {items.map(item => &lt;li&gt;{item}&lt;/li&gt;)}
&lt;/ul&gt;</code></pre>
                
                <blockquote>
                    "Astro lets you use your favorite tools and frameworks to build content-focused websites that load instantly."
                </blockquote>
                
                <h4>Advanced Features</h4>
                <p>Some advanced features you'll love:</p>
                
                <ol>
                    <li>Island architecture for optimal performance</li>
                    <li>Built-in TypeScript support</li>
                    <li>Automatic image optimization</li>
                    <li>RSS feed generation</li>
                    <li>SEO-friendly by default</li>
                </ol>
                
                <p>Ready to start building? Check out the <a href="https://astro.build">official documentation</a> and join the amazing Astro community!</p>
            `;
            
            document.getElementById('editor').innerHTML = demoContent;
            updateMarkdown();
            updateStats();
        }
    </script>
</body>
</html>
