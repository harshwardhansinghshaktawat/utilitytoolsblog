---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fake Text Message Generator | Create Realistic iPhone & Android Text Screenshots</title>
    <meta name="description" content="Free online fake text message generator. Create realistic iPhone and Android text message screenshots for education, entertainment, and design mockups. No download required.">
    <meta name="keywords" content="fake text generator, text message screenshot, iPhone text, Android messages, fake SMS, message mockup, text conversation generator">
    <meta name="robots" content="index, follow">
    <meta property="og:title" content="Fake Text Message Generator - Create Realistic Screenshots">
    <meta property="og:description" content="Generate realistic text message screenshots for iPhone and Android. Perfect for education, entertainment, and design projects.">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    <link rel="canonical" href="#">
    
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            line-height: 1.6;
            color: #222939;
            background: #F7F8FA;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* Hero Section */
        .hero {
            background: linear-gradient(135deg, #2337FF 0%, #4A5AFF 100%);
            color: white;
            padding: 4rem 0;
            text-align: center;
        }

        .hero h1 {
            font-size: 3rem;
            margin-bottom: 1rem;
            font-weight: 700;
        }

        .hero p {
            font-size: 1.2rem;
            margin-bottom: 2rem;
            opacity: 0.9;
        }

        .cta-button {
            background: white;
            color: #2337FF;
            padding: 1rem 2rem;
            border: none;
            border-radius: 50px;
            font-size: 1.1rem;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s;
            text-decoration: none;
            display: inline-block;
        }

        .cta-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(35, 55, 255, 0.3);
        }

        /* Features Section */
        .features {
            padding: 4rem 0;
            background: white;
        }

        .features h2 {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #222939;
        }

        .features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
        }

        .feature-card {
            background: #F7F8FA;
            padding: 2rem;
            border-radius: 12px;
            text-align: center;
            transition: transform 0.3s;
        }

        .feature-card:hover {
            transform: translateY(-5px);
        }

        .feature-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            color: #2337FF;
        }

        .feature-card h3 {
            font-size: 1.3rem;
            margin-bottom: 1rem;
            color: #222939;
        }

        /* Tool Section */
        .tool-section {
            padding: 3rem 0;
            background: #F7F8FA;
        }

        .tool-container {
            background: white;
            border-radius: 20px;
            box-shadow: 0 10px 40px rgba(34, 41, 57, 0.1);
            overflow: hidden;
        }

        .tool-header {
            background: #2337FF;
            color: white;
            padding: 2rem;
            text-align: center;
        }

        .tool-header h2 {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .main-content {
            display: grid;
            grid-template-columns: 1fr 420px;
            gap: 0;
            min-height: 900px;
        }

        .controls {
            padding: 30px;
            background: #F7F8FA;
            border-right: 1px solid #e2e8f0;
            overflow-y: auto;
            max-height: 900px;
        }

        .preview {
            padding: 40px;
            display: flex;
            align-items: center;
            justify-content: center;
            background: white;
            position: relative;
        }

        .control-group {
            margin-bottom: 25px;
        }

        .control-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #222939;
            font-size: 0.9rem;
        }

        .control-group input, .control-group select, .control-group textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            font-size: 14px;
            transition: border-color 0.3s ease;
        }

        .control-group input:focus, .control-group select:focus, .control-group textarea:focus {
            outline: none;
            border-color: #2337FF;
        }

        .avatar-upload {
            display: flex;
            gap: 15px;
            align-items: center;
            margin-top: 10px;
        }

        .avatar-preview {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: linear-gradient(135deg, #2337FF, #4A5AFF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 18px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .avatar-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .file-input {
            flex: 1;
            cursor: pointer;
        }

        /* iPhone X Mockup */
        .iphone-x {
            position: relative;
            margin: 0 auto;
            width: 360px;
            height: 780px;
            background: linear-gradient(60deg, #2337FF 1%, #4A5AFF 100%);
            border-radius: 40px;
            box-shadow: 
                0 0 0 11px #1f1f1f, 
                0 0 0 13px #191919, 
                0 0 0 20px #111,
                0 8px 40px rgba(0,0,0,0.3);
        }

        .iphone-x::before {
            content: '';
            position: absolute;
            top: 0;
            left: 50%;
            transform: translateX(-50%);
            width: 56%;
            height: 30px;
            background: #1f1f1f;
            border-radius: 0 0 40px 40px;
            z-index: 10;
        }

        .iphone-x::after {
            content: '';
            position: absolute;
            bottom: 7px;
            left: 50%;
            transform: translateX(-50%);
            width: 140px;
            height: 4px;
            background: #f2f2f2;
            border-radius: 10px;
            z-index: 10;
        }

        .iphone-speaker {
            position: absolute;
            top: 6px;
            left: 50%;
            transform: translateX(-50%);
            height: 8px;
            width: 15%;
            background: #101010;
            border-radius: 8px;
            box-shadow: inset 0 -3px 3px rgba(255, 255, 255, 0.2);
            z-index: 15;
        }

        .iphone-camera {
            position: absolute;
            left: 50%;
            top: 4px;
            transform: translateX(50px);
            width: 12px;
            height: 12px;
            background: #101010;
            border-radius: 50%;
            box-shadow: inset 0 -3px 2px rgba(255, 255, 255, 0.2);
            z-index: 15;
        }

        .iphone-camera::after {
            content: '';
            position: absolute;
            background: #2d4d76;
            width: 6px;
            height: 6px;
            top: 3px;
            left: 3px;
            border-radius: 50%;
            box-shadow: inset 0 -2px 2px rgba(0, 0, 0, 0.5);
        }

        /* Android Phone */
        .android-phone {
            position: relative;
            margin: 0 auto;
            width: 340px;
            height: 680px;
            background: linear-gradient(145deg, #2c2c2c, #404040);
            border-radius: 25px;
            box-shadow: 
                0 0 0 8px #1a1a1a, 
                0 0 0 10px #111, 
                0 8px 40px rgba(0,0,0,0.3);
        }

        /* Phone Screen */
        .phone-screen {
            position: absolute;
            top: 15px;
            left: 15px;
            right: 15px;
            bottom: 15px;
            background: #000;
            border-radius: 25px;
            overflow: hidden;
            display: flex;
            flex-direction: column;
        }

        .phone-screen.android {
            border-radius: 15px;
        }

        .status-bar {
            height: 44px;
            background: rgba(0,0,0,0.9);
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0 25px;
            color: white;
            font-size: 14px;
            font-weight: 600;
            flex-shrink: 0;
            backdrop-filter: blur(20px);
        }

        .status-bar.android {
            background: #2337FF;
            height: 28px;
            padding: 0 15px;
            font-size: 13px;
        }

        .status-bar.dark {
            background: rgba(28, 28, 30, 0.95);
        }

        .status-bar.dark.android {
            background: #1f1f1f;
        }

        .status-bar.whatsapp { background: #075e54; }
        .status-bar.whatsapp.android { background: #128C7E; }
        .status-bar.telegram { background: #0088cc; }
        .status-bar.signal { background: #2592E9; }

        .status-left, .status-right {
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .messages-header {
            background: linear-gradient(180deg, #f8f8f8 0%, #f0f0f0 100%);
            padding: 15px 20px;
            display: flex;
            align-items: center;
            gap: 15px;
            border-bottom: 1px solid #e0e0e0;
            flex-shrink: 0;
        }

        .messages-header.android {
            background: linear-gradient(180deg, #2337FF 0%, #1976D2 100%);
            color: white;
        }

        .messages-header.dark {
            background: linear-gradient(180deg, #2c2c2e 0%, #1c1c1e 100%);
            color: white;
            border-bottom-color: #38383a;
        }

        .messages-header.dark.android {
            background: linear-gradient(180deg, #212121 0%, #121212 100%);
        }

        .messages-header.whatsapp {
            background: linear-gradient(180deg, #128C7E 0%, #075E54 100%);
            color: white;
        }

        .messages-header.telegram {
            background: linear-gradient(180deg, #54a9eb 0%, #0088cc 100%);
            color: white;
        }

        .messages-header.signal {
            background: linear-gradient(180deg, #2592E9 0%, #1976D2 100%);
            color: white;
        }

        .avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: linear-gradient(135deg, #2337FF, #4A5AFF);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 16px;
            overflow: hidden;
            flex-shrink: 0;
        }

        .avatar img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .contact-info h3 {
            font-size: 17px;
            margin-bottom: 2px;
            font-weight: 600;
        }

        .contact-info p {
            font-size: 13px;
            opacity: 0.8;
        }

        .messages-area {
            flex: 1;
            padding: 20px 15px;
            overflow-y: auto;
            background: #ffffff;
            display: flex;
            flex-direction: column;
            gap: 12px;
            border-radius: 0 0 25px 25px;
        }

        .messages-area.android {
            border-radius: 0 0 15px 15px;
        }

        .messages-area.dark { background: #1c1c1e; }
        .phone-screen.android .messages-area.dark { background: #121212; }

        .messages-area.whatsapp {
            background: #ece5dd;
            background-image: radial-gradient(circle at 20% 20%, rgba(217, 217, 217, 0.3) 1px, transparent 1px);
            background-size: 20px 20px;
        }

        .messages-area.whatsapp.dark { background: #0b141a; }
        .messages-area.telegram { background: linear-gradient(135deg, #dbeafe 0%, #bfdbfe 100%); }
        .messages-area.telegram.dark { background: #17212b; }
        .messages-area.signal { background: #f8fafc; }
        .messages-area.signal.dark { background: #1a1a1a; }

        .message {
            max-width: 75%;
            padding: 12px 16px;
            border-radius: 18px;
            font-size: 16px;
            line-height: 1.4;
            word-wrap: break-word;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
            margin-bottom: 4px;
        }

        .message.sent {
            align-self: flex-end;
            background: linear-gradient(135deg, #2337FF 0%, #4A5AFF 100%);
            color: white;
            border-bottom-right-radius: 4px;
        }

        .message.sent.android { background: linear-gradient(135deg, #4CAF50 0%, #388E3C 100%); }
        .message.sent.whatsapp { background: linear-gradient(135deg, #dcf8c6 0%, #b6d481 100%); color: #000; }
        .message.sent.whatsapp.dark { background: linear-gradient(135deg, #005c4b 0%, #004037 100%); color: white; }
        .message.sent.telegram { background: linear-gradient(135deg, #54a9eb 0%, #0088cc 100%); color: white; }
        .message.sent.signal { background: linear-gradient(135deg, #2592E9 0%, #1976D2 100%); color: white; }

        .message.received {
            align-self: flex-start;
            background: linear-gradient(135deg, #f0f0f0 0%, #e8e8e8 100%);
            color: #000;
            border-bottom-left-radius: 4px;
        }

        .message.received.android { background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%); }
        .message.received.dark { background: linear-gradient(135deg, #3a3a3c 0%, #2c2c2e 100%); color: white; }
        .message.received.whatsapp { background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%); }
        .message.received.whatsapp.dark { background: linear-gradient(135deg, #262d31 0%, #1f2428 100%); color: white; }
        .message.received.telegram { background: linear-gradient(135deg, #ffffff 0%, #f5f5f5 100%); }
        .message.received.telegram.dark { background: linear-gradient(135deg, #2b2e33 0%, #212427 100%); color: white; }
        .message.received.signal { background: linear-gradient(135deg, #f0f0f0 0%, #e8e8e8 100%); }
        .message.received.signal.dark { background: linear-gradient(135deg, #3a3a3c 0%, #2c2c2e 100%); color: white; }

        .message-time {
            font-size: 11px;
            opacity: 0.7;
            margin-top: 6px;
            text-align: right;
            font-weight: 500;
        }

        .message.received .message-time { text-align: left; }

        .btn {
            background: linear-gradient(135deg, #2337FF 0%, #4A5AFF 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(35, 55, 255, 0.3);
        }

        .btn.export-png { background: linear-gradient(135deg, #10b981 0%, #059669 100%); }
        .btn.export-jpg { background: linear-gradient(135deg, #f59e0b 0%, #d97706 100%); }
        .btn.add-message { background: linear-gradient(135deg, #8b5cf6 0%, #7c3aed 100%); }

        .toggle-group {
            display: flex;
            gap: 8px;
            margin-top: 8px;
        }

        .toggle {
            flex: 1;
            padding: 10px 16px;
            border: 2px solid #e5e7eb;
            border-radius: 8px;
            background: white;
            cursor: pointer;
            text-align: center;
            font-size: 13px;
            font-weight: 600;
            transition: all 0.3s ease;
        }

        .toggle.active {
            background: #2337FF;
            color: white;
            border-color: #2337FF;
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(35, 55, 255, 0.3);
        }

        .message-item {
            display: flex;
            gap: 10px;
            margin-bottom: 15px;
            align-items: flex-start;
            flex-wrap: wrap;
        }

        .message-input { flex: 2; min-width: 150px; }
        .message-time-input { flex: 1; min-width: 80px; }

        .message-type-toggle {
            padding: 8px 12px;
            border: 2px solid #e5e7eb;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            font-size: 12px;
            font-weight: 600;
            min-width: 70px;
            text-align: center;
            transition: all 0.3s ease;
        }

        .message-type-toggle.sent {
            background: #2337FF;
            color: white;
            border-color: #2337FF;
        }

        .message-type-toggle.received {
            background: #e5e5ea;
            color: #000;
            border-color: #e5e5ea;
        }

        .remove-message {
            background: #ef4444;
            color: white;
            border: none;
            width: 24px;
            height: 24px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .signal-bars {
            display: flex;
            gap: 2px;
            align-items: flex-end;
        }

        .signal-bar {
            width: 3px;
            background: white;
            border-radius: 1px;
        }

        .battery-icon {
            width: 22px;
            height: 10px;
            border: 1px solid white;
            border-radius: 2px;
            position: relative;
        }

        .battery-fill {
            height: 100%;
            background: white;
            border-radius: 1px;
        }

        .battery-tip {
            position: absolute;
            right: -2px;
            top: 2px;
            width: 1px;
            height: 4px;
            background: white;
            border-radius: 0 1px 1px 0;
        }

        .export-section {
            border-top: 1px solid #e5e7eb;
            padding-top: 20px;
            margin-top: 20px;
        }

        .export-buttons {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }

        .range-display {
            font-size: 12px;
            color: #6b7280;
            margin-top: 4px;
        }

        /* How It Works Section */
        .how-it-works {
            padding: 4rem 0;
            background: white;
        }

        .how-it-works h2 {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #222939;
        }

        .steps {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
        }

        .step {
            text-align: center;
            padding: 2rem 1rem;
        }

        .step-number {
            width: 60px;
            height: 60px;
            background: #2337FF;
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1.5rem;
            font-weight: bold;
            margin: 0 auto 1rem;
        }

        .step h3 {
            font-size: 1.2rem;
            margin-bottom: 1rem;
            color: #222939;
        }

        /* FAQ Section */
        .faq {
            padding: 4rem 0;
            background: #F7F8FA;
        }

        .faq h2 {
            text-align: center;
            font-size: 2.5rem;
            margin-bottom: 3rem;
            color: #222939;
        }

        .faq-item {
            background: white;
            margin-bottom: 1rem;
            border-radius: 8px;
            overflow: hidden;
        }

        .faq-question {
            background: white;
            border: none;
            padding: 1.5rem;
            width: 100%;
            text-align: left;
            font-size: 1.1rem;
            font-weight: 600;
            color: #222939;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .faq-question:hover {
            background: #f8f9fa;
        }

        .faq-answer {
            padding: 0 1.5rem 1.5rem;
            color: #6b7280;
            line-height: 1.6;
        }

        .disclaimer {
            background: #fff3cd;
            border: 1px solid #ffeaa7;
            padding: 1rem;
            margin: 2rem 0;
            border-radius: 8px;
            color: #856404;
        }

        .disclaimer strong {
            color: #6c5703;
        }

        @media (max-width: 768px) {
            .main-content {
                grid-template-columns: 1fr;
            }
            
            .iphone-x, .android-phone {
                width: 300px;
                height: 650px;
            }

            .hero h1 {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
<Header />
    <section class="hero">
        <div class="container">
            <h1>Fake Text Message Generator</h1>
            <p>Create ultra-realistic iPhone and Android text message screenshots for education, entertainment, and design projects. No registration required!</p>
            <a href="#tool" class="cta-button">Start Creating Now</a>
        </div>
    </section>

    <section id="features" class="features">
        <div class="container">
            <h2>Why Choose Our Text Generator?</h2>
            <div class="features-grid">
                <div class="feature-card">
                    <div class="feature-icon">📱</div>
                    <h3>Multiple Device Support</h3>
                    <p>Create realistic screenshots for both iPhone and Android devices with authentic UI elements and styling.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🎨</div>
                    <h3>Customizable Appearance</h3>
                    <p>Choose from various apps (iMessage, WhatsApp, Telegram, Signal), themes, colors, and device settings.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">⚡</div>
                    <h3>Instant Results</h3>
                    <p>Generate high-quality screenshots instantly without any downloads or installations required.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🔒</div>
                    <h3>Privacy Focused</h3>
                    <p>All processing happens locally in your browser. Your data never leaves your device.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">💾</div>
                    <h3>Export Options</h3>
                    <p>Download your creations as high-resolution PNG or JPG files for any purpose.</p>
                </div>
                <div class="feature-card">
                    <div class="feature-icon">🆓</div>
                    <h3>Completely Free</h3>
                    <p>No hidden costs, watermarks, or limitations. Create unlimited fake text messages.</p>
                </div>
            </div>
        </div>
    </section>

    <div class="disclaimer container">
        <strong>Important Notice:</strong> This tool is designed for educational, entertainment, and design purposes only. Please use responsibly and do not create content intended to deceive, harm, or mislead others. Fake text messages should never be used as evidence in legal proceedings or to impersonate others maliciously.
    </div>

    <section id="tool" class="tool-section">
        <div class="container">
            <div class="tool-container">
                <div class="tool-header">
                    <h2>Text Message Generator</h2>
                    <p>Customize every detail to create the perfect fake text conversation</p>
                </div>
                
                <div class="main-content">
                    <div class="controls">
                        <div class="control-group">
                            <label>Phone Model</label>
                            <div class="toggle-group">
                                <div class="toggle active" data-model="iphone">iPhone</div>
                                <div class="toggle" data-model="android">Android</div>
                            </div>
                        </div>

                        <div class="control-group" id="iphoneColorGroup">
                            <label>iPhone Color</label>
                            <select id="iphoneColor">
                                <!-- Populated by JS -->
                            </select>
                        </div>

                        <div class="control-group">
                            <label>Theme Mode</label>
                            <div class="toggle-group">
                                <div class="toggle active" data-theme="light">🌞 Light</div>
                                <div class="toggle" data-theme="dark">🌙 Dark</div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label>Message App</label>
                            <select id="messageApp">
                                <!-- Populated by JS -->
                            </select>
                        </div>

                        <div class="control-group">
                            <label>Contact Name</label>
                            <input type="text" id="contactName" value="John Doe">
                        </div>

                        <div class="control-group">
                            <label>Sender Avatar</label>
                            <div class="avatar-upload">
                                <div class="avatar-preview" id="avatarPreview">JD</div>
                                <input type="file" id="avatarUpload" accept="image/*" class="file-input">
                            </div>
                        </div>

                        <div class="control-group">
                            <label>Status Text</label>
                            <input type="text" id="statusText" value="Active now">
                        </div>

                        <div class="control-group">
                            <label>Carrier</label>
                            <input type="text" id="carrier" value="Verizon">
                        </div>

                        <div class="control-group">
                            <label>Time</label>
                            <input type="time" id="currentTime" value="14:30">
                        </div>

                        <div class="control-group">
                            <label>Battery Level</label>
                            <input type="range" id="batteryLevel" min="1" max="100" value="85">
                            <div class="range-display" id="batteryDisplay">85%</div>
                        </div>

                        <div class="control-group">
                            <label>Signal Strength</label>
                            <input type="range" id="signalStrength" min="0" max="4" value="4">
                            <div class="range-display" id="signalDisplay">Full Signal</div>
                        </div>

                        <div class="control-group">
                            <label>Display Options</label>
                            <div class="toggle-group">
                                <div class="toggle active" data-option="battery">Battery</div>
                                <div class="toggle active" data-option="signal">Signal</div>
                                <div class="toggle active" data-option="wifi">WiFi</div>
                            </div>
                        </div>

                        <div class="control-group">
                            <label>Messages</label>
                            <div id="messagesContainer">
                                <!-- Populated by JS -->
                            </div>
                            <button class="btn add-message" id="addMessageBtn">+ Add Message</button>
                        </div>

                        <div class="export-section">
                            <div class="export-buttons">
                                <button class="btn export-png" id="exportPngBtn">📸 Export PNG</button>
                                <button class="btn export-jpg" id="exportJpgBtn">🖼️ Export JPG</button>
                            </div>
                        </div>
                    </div>

                    <div class="preview">
                        <div id="phoneContainer">
                            <!-- Phone rendered here -->
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="how-it-works" class="how-it-works">
        <div class="container">
            <h2>How It Works</h2>
            <div class="steps">
                <div class="step">
                    <div class="step-number">1</div>
                    <h3>Choose Your Device</h3>
                    <p>Select iPhone or Android and customize the appearance, colors, and messaging app.</p>
                </div>
                <div class="step">
                    <div class="step-number">2</div>
                    <h3>Add Messages</h3>
                    <p>Create your conversation by adding sent and received messages with custom timestamps.</p>
                </div>
                <div class="step">
                    <div class="step-number">3</div>
                    <h3>Customize Details</h3>
                    <p>Set contact name, avatar, carrier, battery level, signal strength, and other realistic details.</p>
                </div>
                <div class="step">
                    <div class="step-number">4</div>
                    <h3>Export & Share</h3>
                    <p>Download your realistic text message screenshot as PNG or JPG in high resolution.</p>
                </div>
            </div>
        </div>
    </section>

    <section id="faq" class="faq">
        <div class="container">
            <h2>Frequently Asked Questions</h2>
            
            <div class="faq-item">
                <button class="faq-question">Is this tool completely free to use?</button>
                <div class="faq-answer">
                    Yes, our fake text message generator is completely free with no hidden costs, registration requirements, or watermarks on your exports.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">What devices and apps are supported?</button>
                <div class="faq-answer">
                    We support both iPhone and Android devices with popular messaging apps including iMessage, WhatsApp, Telegram, Signal, and Google Messages.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">Is my data safe and private?</button>
                <div class="faq-answer">
                    Absolutely. All processing happens locally in your browser. No data is sent to our servers, ensuring complete privacy and security.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">Can I use these screenshots commercially?</button>
                <div class="faq-answer">
                    Yes, you can use the generated screenshots for educational, design mockups, entertainment, and commercial purposes as long as they're not used to deceive or harm others.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">What export formats are available?</button>
                <div class="faq-answer">
                    You can export your fake text messages as high-resolution PNG (with transparency) or JPG files suitable for any use case.
                </div>
            </div>

            <div class="faq-item">
                <button class="faq-question">Are there any limitations on message length or quantity?</button>
                <div class="faq-answer">
                    No, you can create as many messages as you want with any length text. The tool automatically adjusts the layout to accommodate your content.
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script>
        class FakeTextGenerator {
            constructor() {
                this.currentModel = 'iphone';
                this.currentApp = 'imessage';
                this.darkMode = false;
                this.showBattery = true;
                this.showSignal = true;
                this.showWifi = true;
                this.iphoneColor = 'purple';
                this.senderAvatar = null;
                this.messages = [
                    { text: "Hey! How are you?", type: "received", time: "14:25" },
                    { text: "I'm good! Thanks for asking 😊", type: "sent", time: "14:30" }
                ];
                
                this.iphoneColors = {
                    purple: { name: 'Purple', gradient: 'linear-gradient(60deg, #2337FF 1%, #4A5AFF 100%)' },
                    blue: { name: 'Blue', gradient: 'linear-gradient(60deg, #4facfe 0%, #00f2fe 100%)' },
                    black: { name: 'Space Gray', gradient: 'linear-gradient(60deg, #29323c 0%, #485563 100%)' },
                    white: { name: 'Silver', gradient: 'linear-gradient(60deg, #ffecd2 0%, #fcb69f 100%)' },
                    red: { name: 'Red', gradient: 'linear-gradient(60deg, #ff9a9e 0%, #fecfef 100%)' },
                    green: { name: 'Green', gradient: 'linear-gradient(60deg, #a8edea 0%, #fed6e3 100%)' }
                };
                
                this.messageApps = {
                    iphone: [
                        { value: 'imessage', name: 'Messages (iMessage)', color: '#2337FF' },
                        { value: 'whatsapp', name: 'WhatsApp', color: '#25D366' },
                        { value: 'telegram', name: 'Telegram', color: '#0088cc' },
                        { value: 'signal', name: 'Signal', color: '#2592E9' }
                    ],
                    android: [
                        { value: 'messages', name: 'Google Messages', color: '#1976D2' },
                        { value: 'whatsapp', name: 'WhatsApp', color: '#25D366' },
                        { value: 'telegram', name: 'Telegram', color: '#0088cc' },
                        { value: 'signal', name: 'Signal', color: '#2592E9' }
                    ]
                };
                
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.populateSelects();
                this.renderMessageInputs();
                this.updatePreview();
                this.setupFAQ();
            }

            setupEventListeners() {
                // Phone model toggles
                document.querySelectorAll('[data-model]').forEach(toggle => {
                    toggle.addEventListener('click', () => {
                        document.querySelectorAll('[data-model]').forEach(t => t.classList.remove('active'));
                        toggle.classList.add('active');
                        this.currentModel = toggle.dataset.model;
                        this.populateMessageApps();
                        this.updateIphoneColorVisibility();
                        this.updatePreview();
                    });
                });

                // Theme toggles
                document.querySelectorAll('[data-theme]').forEach(toggle => {
                    toggle.addEventListener('click', () => {
                        document.querySelectorAll('[data-theme]').forEach(t => t.classList.remove('active'));
                        toggle.classList.add('active');
                        this.darkMode = toggle.dataset.theme === 'dark';
                        this.updatePreview();
                    });
                });

                // Option toggles
                document.querySelectorAll('[data-option]').forEach(toggle => {
                    toggle.addEventListener('click', () => {
                        toggle.classList.toggle('active');
                        const option = toggle.dataset.option;
                        if (option === 'battery') this.showBattery = toggle.classList.contains('active');
                        if (option === 'signal') this.showSignal = toggle.classList.contains('active');
                        if (option === 'wifi') this.showWifi = toggle.classList.contains('active');
                        this.updatePreview();
                    });
                });

                // Input event listeners
                const inputs = ['contactName', 'statusText', 'carrier', 'currentTime', 'batteryLevel', 'signalStrength', 'messageApp', 'iphoneColor'];
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.addEventListener('input', () => this.updatePreview());
                    }
                });

                // Avatar upload
                document.getElementById('avatarUpload').addEventListener('change', (e) => {
                    const file = e.target.files[0];
                    if (file) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            this.senderAvatar = e.target.result;
                            this.updateAvatarPreview();
                            this.updatePreview();
                        };
                        reader.readAsDataURL(file);
                    }
                });

                // Battery and signal displays
                document.getElementById('batteryLevel').addEventListener('input', (e) => {
                    document.getElementById('batteryDisplay').textContent = e.target.value + '%';
                });

                document.getElementById('signalStrength').addEventListener('input', (e) => {
                    const strength = parseInt(e.target.value);
                    const labels = ['No Signal', 'Poor', 'Fair', 'Good', 'Excellent'];
                    document.getElementById('signalDisplay').textContent = labels[strength];
                });

                // Add message button
                document.getElementById('addMessageBtn').addEventListener('click', () => {
                    this.addMessage();
                });

                // Export buttons
                document.getElementById('exportPngBtn').addEventListener('click', () => {
                    this.exportImage('png');
                });

                document.getElementById('exportJpgBtn').addEventListener('click', () => {
                    this.exportImage('jpg');
                });
            }

            setupFAQ() {
                document.querySelectorAll('.faq-question').forEach(question => {
                    question.addEventListener('click', () => {
                        const answer = question.nextElementSibling;
                        const isOpen = answer.style.display === 'block';
                        
                        // Close all other answers
                        document.querySelectorAll('.faq-answer').forEach(a => a.style.display = 'none');
                        
                        // Toggle current answer
                        answer.style.display = isOpen ? 'none' : 'block';
                    });
                });
            }

            populateSelects() {
                // Populate iPhone colors
                const iphoneColorSelect = document.getElementById('iphoneColor');
                Object.entries(this.iphoneColors).forEach(([key, color]) => {
                    const option = document.createElement('option');
                    option.value = key;
                    option.textContent = color.name;
                    if (key === this.iphoneColor) option.selected = true;
                    iphoneColorSelect.appendChild(option);
                });

                this.populateMessageApps();
                this.updateIphoneColorVisibility();
            }

            populateMessageApps() {
                const select = document.getElementById('messageApp');
                const apps = this.messageApps[this.currentModel];
                
                select.innerHTML = '';
                apps.forEach(app => {
                    const option = document.createElement('option');
                    option.value = app.value;
                    option.textContent = app.name;
                    if (app.value === this.currentApp) option.selected = true;
                    select.appendChild(option);
                });
                
                if (!apps.some(app => app.value === this.currentApp)) {
                    this.currentApp = apps[0].value;
                    select.value = this.currentApp;
                }
            }

            updateIphoneColorVisibility() {
                const colorGroup = document.getElementById('iphoneColorGroup');
                colorGroup.style.display = this.currentModel === 'iphone' ? 'block' : 'none';
            }

            updateAvatarPreview() {
                const preview = document.getElementById('avatarPreview');
                if (this.senderAvatar) {
                    preview.innerHTML = `<img src="${this.senderAvatar}" alt="Avatar">`;
                } else {
                    const contactName = document.getElementById('contactName').value;
                    const initials = contactName.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
                    preview.textContent = initials;
                }
            }

            renderMessageInputs() {
                const container = document.getElementById('messagesContainer');
                container.innerHTML = '';
                
                this.messages.forEach((message, index) => {
                    const messageItem = document.createElement('div');
                    messageItem.className = 'message-item';
                    messageItem.innerHTML = `
                        <input type="text" class="message-input" placeholder="Enter message..." value="${message.text}">
                        <input type="time" class="message-time-input" value="${message.time}">
                        <div class="message-type-toggle ${message.type}">${message.type === 'sent' ? 'Sent' : 'Received'}</div>
                        <button class="remove-message">×</button>
                    `;
                    
                    // Add event listeners for this message item
                    const messageInput = messageItem.querySelector('.message-input');
                    const timeInput = messageItem.querySelector('.message-time-input');
                    const typeToggle = messageItem.querySelector('.message-type-toggle');
                    const removeBtn = messageItem.querySelector('.remove-message');
                    
                    messageInput.addEventListener('input', () => {
                        this.messages[index].text = messageInput.value;
                        this.updatePreview();
                    });
                    
                    timeInput.addEventListener('input', () => {
                        this.messages[index].time = timeInput.value;
                        this.updatePreview();
                    });
                    
                    typeToggle.addEventListener('click', () => {
                        this.toggleMessageType(index);
                    });
                    
                    removeBtn.addEventListener('click', () => {
                        this.removeMessage(index);
                    });
                    
                    container.appendChild(messageItem);
                });
            }

            addMessage() {
                this.messages.push({ text: '', type: 'received', time: '14:30' });
                this.renderMessageInputs();
                this.updatePreview();
            }

            removeMessage(index) {
                if (this.messages.length > 1) {
                    this.messages.splice(index, 1);
                    this.renderMessageInputs();
                    this.updatePreview();
                }
            }

            toggleMessageType(index) {
                const message = this.messages[index];
                message.type = message.type === 'sent' ? 'received' : 'sent';
                this.renderMessageInputs();
                this.updatePreview();
            }

            updatePreview() {
                this.iphoneColor = document.getElementById('iphoneColor')?.value || 'purple';
                this.currentApp = document.getElementById('messageApp')?.value || 'imessage';
                this.updateAvatarPreview();
                this.renderPhone();
            }

            renderPhone() {
                const container = document.getElementById('phoneContainer');
                
                if (this.currentModel === 'iphone') {
                    container.innerHTML = `
                        <div class="iphone-x" style="background: ${this.iphoneColors[this.iphoneColor].gradient}">
                            <div class="iphone-speaker"></div>
                            <div class="iphone-camera"></div>
                            <div class="phone-screen">
                                ${this.renderScreenContent()}
                            </div>
                        </div>
                    `;
                } else {
                    container.innerHTML = `
                        <div class="android-phone">
                            <div class="phone-screen android">
                                ${this.renderScreenContent()}
                            </div>
                        </div>
                    `;
                }
            }

            renderScreenContent() {
                const contactName = document.getElementById('contactName')?.value || 'John Doe';
                const statusText = document.getElementById('statusText')?.value || 'Active now';
                const carrier = document.getElementById('carrier')?.value || 'Verizon';
                const currentTime = document.getElementById('currentTime')?.value || '14:30';
                const batteryLevel = document.getElementById('batteryLevel')?.value || 85;
                const signalStrength = document.getElementById('signalStrength')?.value || 4;
                
                const timeFormatted = this.formatTime(currentTime);
                const initials = contactName.split(' ').map(n => n[0]).join('').toUpperCase().substring(0, 2);
                const appClasses = `${this.currentModel} ${this.currentApp} ${this.darkMode ? 'dark' : ''}`;
                
                const avatarContent = this.senderAvatar ? 
                    `<img src="${this.senderAvatar}" alt="Avatar">` : 
                    initials;

                const signalBars = this.showSignal ? `
                    <div class="signal-bars">
                        ${Array.from({length: 4}, (_, i) => 
                            `<div class="signal-bar" style="height: ${(i + 1) * 2 + 2}px; opacity: ${i < signalStrength ? 1 : 0.3}"></div>`
                        ).join('')}
                    </div>
                ` : '';

                const battery = this.showBattery ? `
                    <div class="battery-icon">
                        <div class="battery-fill" style="width: ${batteryLevel}%;"></div>
                        <div class="battery-tip"></div>
                    </div>
                    <span>${batteryLevel}%</span>
                ` : '';

                const wifi = this.showWifi ? '<span>📶</span>' : '';

                return `
                    <div class="status-bar ${appClasses}">
                        <div class="status-left">
                            <span>${timeFormatted}</span>
                        </div>
                        <div class="status-right">
                            ${signalBars}
                            ${wifi}
                            <span>${carrier}</span>
                            ${battery}
                        </div>
                    </div>
                    
                    <div class="messages-header ${appClasses}">
                        <div class="avatar">${avatarContent}</div>
                        <div class="contact-info">
                            <h3>${contactName}</h3>
                            <p>${statusText}</p>
                        </div>
                    </div>
                    
                    <div class="messages-area ${appClasses}">
                        ${this.renderMessages()}
                    </div>
                `;
            }

            renderMessages() {
                if (this.messages.length === 0 || this.messages.every(msg => !msg.text.trim())) {
                    return '<div style="display: flex; align-items: center; justify-content: center; height: 200px; color: #9ca3af;">No messages yet. Add some messages!</div>';
                }

                const appClasses = `${this.currentModel} ${this.currentApp} ${this.darkMode ? 'dark' : ''}`;
                
                return this.messages.map(message => {
                    if (!message.text.trim()) return '';
                    
                    const timeFormatted = this.formatTime(message.time);
                    
                    return `
                        <div class="message ${message.type} ${appClasses}">
                            ${message.text}
                            <div class="message-time">${timeFormatted}</div>
                        </div>
                    `;
                }).join('');
            }

            formatTime(timeString) {
                const [hours, minutes] = timeString.split(':');
                const hour24 = parseInt(hours);
                const hour12 = hour24 % 12 || 12;
                const ampm = hour24 >= 12 ? 'PM' : 'AM';
                return `${hour12}:${minutes} ${ampm}`;
            }

            async exportImage(format = 'png') {
                const phoneContainer = document.getElementById('phoneContainer');
                
                if (!window.html2canvas) {
                    alert('Loading export library... Please wait a moment and try again.');
                    return;
                }

                try {
                    const canvas = await html2canvas(phoneContainer, {
                        scale: 3,
                        useCORS: true,
                        allowTaint: true,
                        backgroundColor: null,
                        logging: false
                    });

                    const link = document.createElement('a');
                    link.download = `fake-text-message-${Date.now()}.${format}`;
                    link.href = canvas.toDataURL(`image/${format}`, format === 'jpg' ? 0.95 : 1.0);
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    
                    alert(`${format.toUpperCase()} exported successfully!`);
                } catch (error) {
                    console.error('Export failed:', error);
                    alert('Export failed. Please try taking a screenshot instead.');
                }
            }
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', () => {
            new FakeTextGenerator();
        });

        // Smooth scrolling for navigation links
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });
    </script>
    <Footer />
</body>
</html>
