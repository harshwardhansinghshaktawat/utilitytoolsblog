---
import { useState } from 'preact/hooks'; // For state management in client-side component
import Layout from '../layouts/Layout.astro'; // Assuming a layout component
import 'quill/dist/quill.snow.css'; // Quill editor styles
---

<Layout title="Rich Text to Markdown Converter">
  <!-- Main container -->
  <main class="container mx-auto p-4 max-w-6xl">
    <h1 class="text-3xl font-bold mb-4">Rich Text to GitHub Markdown Converter</h1>
    <p class="mb-4 text-gray-600">
      Convert rich text to GitHub-compatible Markdown with real-time preview.
    </p>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
      <!-- Rich Text Editor -->
      <div class="border rounded p-4">
        <h2 class="text-xl font-semibold mb-2">Rich Text Editor</h2>
        <div id="editor" class="min-h-[300px]"></div>
      </div>

      <!-- Markdown Preview -->
      <div class="border rounded p-4">
        <h2 class="text-xl font-semibold mb-2">Markdown Preview</h2>
        <pre id="markdown-output" class="bg-gray-800 text-white p-4 rounded overflow-auto min-h-[300px]"><code></code></pre>
        <div class="mt-4 flex gap-2">
          <button id="copy-btn" class="bg-blue-500 text-white px-4 py-2 rounded hover:bg-blue-600">
            Copy Markdown
          </button>
          <button id="download-btn" class="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
            Download as .md
          </button>
        </div>
      </div>
    </div>
  </main>

  <!-- Client-side script for interactivity -->
  <script>
    import Quill from 'quill';
    import Turndown from 'turndown';
    import { marked } from 'marked';
    import hljs from 'highlight.js';
    import 'highlight.js/styles/github-dark.css';

    // Initialize Quill editor
    const quill = new Quill('#editor', {
      theme: 'snow',
      modules: {
        toolbar: [
          [{ header: [1, 2, 3, false] }],
          ['bold', 'italic', 'underline', 'strike'],
          ['blockquote', 'code-block'],
          [{ list: 'ordered' }, { list: 'bullet' }],
          ['link', 'image'],
          ['clean'],
        ],
      },
    });

    // Initialize Turndown for HTML to Markdown conversion
    const turndownService = new Turndown({
      headingStyle: 'atx', // Use # for headings (GitHub style)
      codeBlockStyle: 'fenced', // Use ``` for code blocks
      bulletListMarker: '-', // Use - for lists
      emDelimiter: '*', // Use * for emphasis
      strongDelimiter: '**', // Use ** for bold
    });

    // Add GitHub-specific rules to Turndown
    turndownService.addRule('strikethrough', {
      filter: ['del', 's', 'strike'],
      replacement: (content) => `~~${content}~~`,
    });

    // Real-time conversion
    quill.on('text-change', () => {
      const html = quill.root.innerHTML;
      const markdown = turndownService.turndown(html);
      const outputElement = document.querySelector('#markdown-output code');
      outputElement.textContent = markdown;

      // Highlight Markdown syntax in preview
      hljs.highlightElement(outputElement);
    });

    // Copy to clipboard
    document.getElementById('copy-btn').addEventListener('click', () => {
      const markdown = document.querySelector('#markdown-output code').textContent;
      navigator.clipboard.writeText(markdown).then(() => {
        alert('Markdown copied to clipboard!');
      });
    });

    // Download as .md file
    document.getElementById('download-btn').addEventListener('click', () => {
      const markdown = document.querySelector('#markdown-output code').textContent;
      const blob = new Blob([markdown], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'converted-content.md';
      a.click();
      URL.revokeObjectURL(url);
    });
  </script>
</Layout>

<style>
  #editor {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.25rem;
  }
  #markdown-output {
    font-family: 'Courier New', Courier, monospace;
  }
</style>
