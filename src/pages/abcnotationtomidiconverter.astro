---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
---

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Convert ABC notation to MIDI files instantly. Free online tool for musicians to transform musical notation into playable audio with sheet music preview.">
    <meta name="keywords" content="ABC notation, MIDI converter, sheet music, musical notation, audio converter, online music tool">
    <meta name="author" content="ABC MIDI Converter">
    <meta property="og:title" content="ABC to MIDI Converter - Transform Musical Notation">
    <meta property="og:description" content="Convert ABC notation to MIDI files instantly. Free online tool with playback and sheet music preview.">
    <meta property="og:type" content="website">
    <meta name="twitter:card" content="summary_large_image">
    <meta name="robots" content="index, follow">
    <title>ABC to MIDI Converter - Transform Musical Notation Online</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <script src="https://cdn.jsdelivr.net/npm/abcjs@6.2.2/dist/abcjs-basic-min.js"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/abcjs@6.2.2/dist/abcjs-audio.css">
    
    <style>
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }
        
        .abc2midi-root {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #222939;
            background: #F7F8FA;
            min-height: 100vh;
        }
        
        .abc2midi-hero-section {
            background: linear-gradient(135deg, #F7F8FA 0%, #ffffff 100%);
            padding: 4rem 2rem 2rem 2rem;
            text-align: center;
        }
        
        .abc2midi-hero-title {
            font-size: clamp(2.5rem, 5vw, 4rem);
            font-weight: 700;
            color: #222939;
            margin-bottom: 1rem;
            letter-spacing: -0.025em;
        }
        
        .abc2midi-hero-subtitle {
            font-size: clamp(1.1rem, 2vw, 1.25rem);
            color: #222939;
            opacity: 0.8;
            margin-bottom: 2rem;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
        }
        
        .abc2midi-features-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 2rem;
            max-width: 1200px;
            margin: 3rem auto 0 auto;
            padding: 0 2rem;
        }
        
        .abc2midi-feature-card {
            background: white;
            padding: 2rem;
            border-radius: 20px;
            box-shadow: 0 10px 30px rgba(35, 55, 255, 0.08);
            text-align: center;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }
        
        .abc2midi-feature-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 40px rgba(35, 55, 255, 0.12);
        }
        
        .abc2midi-feature-icon {
            width: 60px;
            height: 60px;
            margin: 0 auto 1.5rem auto;
            background: #2337FF;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
        }
        
        .abc2midi-feature-icon svg {
            width: 30px;
            height: 30px;
            fill: white;
        }
        
        .abc2midi-feature-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: #222939;
            margin-bottom: 1rem;
        }
        
        .abc2midi-feature-desc {
            color: #222939;
            opacity: 0.7;
            line-height: 1.6;
        }
        
        .abc2midi-converter-section {
            max-width: 1200px;
            margin: 4rem auto;
            padding: 0 2rem;
        }
        
        .abc2midi-section-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #222939;
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .abc2midi-converter-container {
            background: white;
            border-radius: 28px;
            box-shadow: 0 20px 60px rgba(35, 55, 255, 0.1);
            overflow: hidden;
            position: relative;
        }
        
        .abc2midi-converter-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 4px;
            background: linear-gradient(90deg, #2337FF 0%, #222939 100%);
        }
        
        .abc2midi-converter-header {
            background: linear-gradient(135deg, #2337FF 0%, #222939 100%);
            color: white;
            padding: 2.5rem;
            text-align: center;
            position: relative;
            overflow: hidden;
        }
        
        .abc2midi-converter-header::before {
            content: '';
            position: absolute;
            top: -50%;
            left: -50%;
            width: 200%;
            height: 200%;
            background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
            animation: abc2midi-float 6s ease-in-out infinite;
        }
        
        @keyframes abc2midi-float {
            0%, 100% { transform: translate(-50%, -50%) rotate(0deg); }
            50% { transform: translate(-30%, -30%) rotate(180deg); }
        }
        
        .abc2midi-converter-title {
            font-size: 2.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
            position: relative;
            z-index: 1;
        }
        
        .abc2midi-converter-subtitle {
            font-size: 1rem;
            opacity: 0.9;
            position: relative;
            z-index: 1;
        }
        
        .abc2midi-converter-content {
            padding: 2.5rem;
        }
        
        .abc2midi-input-section {
            margin-bottom: 2.5rem;
        }
        
        .abc2midi-label {
            font-weight: 600;
            margin-bottom: 1rem;
            display: block;
            color: #222939;
            font-size: 1.1rem;
        }
        
        .abc2midi-textarea {
            width: 100%;
            min-height: 200px;
            background: #F7F8FA;
            border: 2px solid transparent;
            border-radius: 16px;
            padding: 1.5rem;
            font-family: 'Inter', monospace;
            font-size: 14px;
            color: #222939;
            resize: vertical;
            transition: all 0.3s ease;
            line-height: 1.6;
        }
        
        .abc2midi-textarea:focus {
            outline: none;
            border-color: #2337FF;
            background: white;
            box-shadow: 0 0 0 4px rgba(35, 55, 255, 0.1);
        }
        
        .abc2midi-textarea::placeholder {
            color: #222939;
            opacity: 0.5;
            font-style: italic;
        }
        
        .abc2midi-controls {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 1.5rem;
            flex-wrap: wrap;
            gap: 1rem;
        }
        
        .abc2midi-select {
            background: #F7F8FA;
            border: 2px solid transparent;
            border-radius: 12px;
            padding: 0.75rem 1rem;
            font-family: 'Inter', sans-serif;
            font-size: 14px;
            color: #222939;
            cursor: pointer;
            transition: all 0.3s ease;
            min-width: 200px;
        }
        
        .abc2midi-select:focus {
            outline: none;
            border-color: #2337FF;
            background: white;
            box-shadow: 0 0 0 4px rgba(35, 55, 255, 0.1);
        }
        
        .abc2midi-button {
            background: #F7F8FA;
            border: 2px solid transparent;
            border-radius: 12px;
            padding: 0.75rem 1.5rem;
            font-family: 'Inter', sans-serif;
            font-weight: 500;
            font-size: 14px;
            color: #222939;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            min-height: 48px;
            position: relative;
            overflow: hidden;
        }
        
        .abc2midi-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.3), transparent);
            transition: all 0.3s ease;
        }
        
        .abc2midi-button:hover::before {
            left: 100%;
        }
        
        .abc2midi-button:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(35, 55, 255, 0.2);
        }
        
        .abc2midi-button:active {
            transform: translateY(0);
        }
        
        .abc2midi-button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }
        
        .abc2midi-button svg {
            width: 18px;
            height: 18px;
            fill: currentColor;
        }
        
        .abc2midi-button-primary {
            background: linear-gradient(135deg, #2337FF 0%, #222939 100%);
            color: white;
        }
        
        .abc2midi-button-success {
            background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);
            color: white;
        }
        
        .abc2midi-button-warning {
            background: linear-gradient(135deg, #ed8936 0%, #dd6b20 100%);
            color: white;
        }
        
        .abc2midi-score-section {
            margin-top: 2.5rem;
        }
        
        .abc2midi-score-card {
            background: #F7F8FA;
            border-radius: 16px;
            padding: 2rem;
            margin-top: 1.5rem;
            min-height: 200px;
            position: relative;
        }
        
        .abc2midi-score-output {
            width: 100%;
            overflow-x: auto;
            padding: 1rem;
            border-radius: 12px;
            background: white;
            min-height: 150px;
            box-shadow: inset 0 2px 8px rgba(35, 55, 255, 0.08);
        }
        
        .abc2midi-audio-controls {
            margin-top: 1rem;
            padding: 1rem;
            background: white;
            border-radius: 12px;
            box-shadow: inset 0 2px 8px rgba(35, 55, 255, 0.08);
        }
        
        .abc2midi-player-controls {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 1rem;
            margin-top: 1.5rem;
        }
        
        .abc2midi-progress-container {
            margin-top: 1.5rem;
            padding: 1rem;
            background: #F7F8FA;
            border-radius: 12px;
        }
        
        .abc2midi-progress-bar-container {
            height: 8px;
            width: 100%;
            background: #F7F8FA;
            border-radius: 4px;
            position: relative;
            overflow: hidden;
            box-shadow: inset 0 2px 4px rgba(35, 55, 255, 0.1);
        }
        
        .abc2midi-progress-bar {
            height: 100%;
            width: 0%;
            background: linear-gradient(90deg, #2337FF, #222939);
            border-radius: 4px;
            transition: width 0.1s linear;
            position: relative;
        }
        
        .abc2midi-progress-bar::after {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.4), transparent);
            animation: abc2midi-shimmer 2s infinite;
        }
        
        @keyframes abc2midi-shimmer {
            0% { left: -100%; }
            100% { left: 100%; }
        }
        
        .abc2midi-download-section {
            margin-top: 2.5rem;
            padding: 2rem;
            background: #F7F8FA;
            border-radius: 16px;
        }
        
        .abc2midi-download-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-top: 1rem;
        }
        
        .abc2midi-download-card {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            text-align: center;
            transition: all 0.3s ease;
            text-decoration: none;
            color: #222939;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 1rem;
            box-shadow: 0 4px 20px rgba(35, 55, 255, 0.08);
            border: 2px solid transparent;
        }
        
        .abc2midi-download-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 30px rgba(35, 55, 255, 0.15);
            border-color: #2337FF;
        }
        
        .abc2midi-download-card svg {
            width: 32px;
            height: 32px;
            fill: #2337FF;
        }
        
        .abc2midi-download-title {
            font-weight: 600;
            font-size: 1.1rem;
        }
        
        .abc2midi-download-desc {
            font-size: 0.9rem;
            opacity: 0.7;
        }
        
        .abc2midi-message {
            padding: 1rem 1.5rem;
            border-radius: 12px;
            margin-top: 1rem;
            font-weight: 500;
            display: none;
            text-align: center;
        }
        
        .abc2midi-error-message {
            background: linear-gradient(135deg, #fed7d7 0%, #feb2b2 100%);
            color: #c53030;
            border-left: 4px solid #c53030;
        }
        
        .abc2midi-status-message {
            background: linear-gradient(135deg, #c6f6d5 0%, #9ae6b4 100%);
            color: #2f855a;
            border-left: 4px solid #2f855a;
        }
        
        .abc2midi-loader {
            display: none;
            text-align: center;
            padding: 2rem;
        }
        
        .abc2midi-spinner {
            width: 48px;
            height: 48px;
            border-radius: 50%;
            background: conic-gradient(from 0deg, #2337FF, #222939, #2337FF);
            mask: radial-gradient(circle at center, transparent 16px, black 17px);
            animation: abc2midi-spin 1s linear infinite;
            margin: 0 auto 1rem auto;
        }
        
        @keyframes abc2midi-spin {
            to { transform: rotate(360deg); }
        }
        
        .abc2midi-loader p {
            color: #222939;
            font-weight: 500;
            margin: 0;
        }
        
        .abc2midi-debug-info {
            font-size: 12px;
            color: #222939;
            opacity: 0.6;
            margin-top: 1.5rem;
            display: none;
            max-height: 200px;
            overflow-y: auto;
            background: #F7F8FA;
            border-radius: 12px;
            padding: 1rem;
            font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
            line-height: 1.4;
            box-shadow: inset 0 2px 8px rgba(35, 55, 255, 0.08);
        }
        
        .abc2midi-about-section {
            max-width: 1200px;
            margin: 4rem auto;
            padding: 0 2rem;
        }
        
        .abc2midi-about-content {
            background: white;
            border-radius: 20px;
            padding: 3rem;
            box-shadow: 0 10px 30px rgba(35, 55, 255, 0.08);
        }
        
        .abc2midi-about-title {
            font-size: 2rem;
            font-weight: 600;
            color: #222939;
            margin-bottom: 1.5rem;
            text-align: center;
        }
        
        .abc2midi-about-text {
            color: #222939;
            opacity: 0.8;
            line-height: 1.8;
            margin-bottom: 1.5rem;
        }
        
        .abc2midi-faq-section {
            max-width: 1200px;
            margin: 4rem auto;
            padding: 0 2rem;
        }
        
        .abc2midi-faq-title {
            font-size: 2.5rem;
            font-weight: 700;
            color: #222939;
            text-align: center;
            margin-bottom: 3rem;
        }
        
        .abc2midi-faq-item {
            background: white;
            border-radius: 16px;
            padding: 2rem;
            margin-bottom: 1.5rem;
            box-shadow: 0 4px 20px rgba(35, 55, 255, 0.08);
        }
        
        .abc2midi-faq-question {
            font-size: 1.2rem;
            font-weight: 600;
            color: #222939;
            margin-bottom: 1rem;
        }
        
        .abc2midi-faq-answer {
            color: #222939;
            opacity: 0.8;
            line-height: 1.6;
        }
        
        /* Responsive Design */
        @media (max-width: 768px) {
            .abc2midi-hero-section {
                padding: 2rem 1rem;
            }
            
            .abc2midi-converter-content {
                padding: 1.5rem;
            }
            
            .abc2midi-controls {
                flex-direction: column;
                align-items: stretch;
            }
            
            .abc2midi-select {
                min-width: 100%;
            }
            
            .abc2midi-player-controls {
                grid-template-columns: 1fr;
            }
            
            .abc2midi-textarea {
                font-size: 16px; /* Prevents zoom on iOS */
            }
        }
        
        @media (max-width: 480px) {
            .abc2midi-converter-header {
                padding: 1.5rem;
            }
            
            .abc2midi-converter-content {
                padding: 1rem;
            }
            
            .abc2midi-about-content {
                padding: 2rem;
            }
        }
        
        /* ABCJS Styling Overrides */
        .abc2midi-score-output .abcjs-midi-selection,
        .abc2midi-score-output .abcjs-midi-current-tempo,
        .abc2midi-score-output .abcjs-midi-progress,
        .abc2midi-score-output .abcjs-midi-clock {
            font-family: 'Inter', sans-serif !important;
            color: #222939 !important;
            margin: 0.75rem 0;
        }
        
        .abc2midi-score-output .abcjs-midi-selection select {
            background: #F7F8FA;
            border: 2px solid transparent;
            border-radius: 8px;
            padding: 0.5rem 0.75rem;
            margin: 0.25rem;
            color: #222939;
            font-family: 'Inter', sans-serif;
        }
        
        .abc2midi-score-output .abcjs-midi-selection select:focus {
            outline: none;
            border-color: #2337FF;
        }
        
        .abc2midi-score-output .abcjs-midi-selection button {
            background: #F7F8FA !important;
            border: 2px solid transparent !important;
            border-radius: 8px !important;
            padding: 0.5rem 0.75rem !important;
            margin: 0.25rem !important;
            color: #222939 !important;
            font-family: 'Inter', sans-serif !important;
            font-size: 12px !important;
            font-weight: 500 !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
        }
        
        .abc2midi-score-output .abcjs-midi-selection button:hover {
            transform: translateY(-1px) !important;
            box-shadow: 0 4px 12px rgba(35, 55, 255, 0.15) !important;
            border-color: #2337FF !important;
        }
        
        .abc2midi-score-output .abcjs-midi-selection button:active {
            transform: translateY(1px) !important;
        }
        
        .abc2midi-score-output .abcjs-midi-selection button:disabled {
            opacity: 0.6 !important;
            cursor: not-allowed !important;
            transform: none !important;
        }
        
        .abc2midi-score-output .abcjs-midi-progress-background {
            background: #F7F8FA !important;
            height: 8px !important;
            border-radius: 4px !important;
            box-shadow: inset 0 2px 4px rgba(35, 55, 255, 0.1) !important;
        }
        
        .abc2midi-score-output .abcjs-midi-progress-indicator {
            background: linear-gradient(90deg, #2337FF, #222939) !important;
            height: 8px !important;
            border-radius: 4px !important;
            box-shadow: 0 2px 4px rgba(35, 55, 255, 0.3) !important;
        }
    </style>
</head>
<body class="abc2midi-root">
    <!-- Hero Section -->
    <section class="abc2midi-hero-section">
        <h1 class="abc2midi-hero-title">ABC to MIDI Converter</h1>
        <p class="abc2midi-hero-subtitle">Transform musical notation into beautiful sound with our powerful online tool. Convert ABC notation to MIDI files instantly with playback and sheet music preview.</p>
        
        <div class="abc2midi-features-grid">
            <div class="abc2midi-feature-card">
                <div class="abc2midi-feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M12 3v10.55c-.59-.34-1.27-.55-2-.55-2.21 0-4 1.79-4 4s1.79 4 4 4 4-1.79 4-4V7h4V3h-6z"/>
                    </svg>
                </div>
                <h3 class="abc2midi-feature-title">Instant Conversion</h3>
                <p class="abc2midi-feature-desc">Convert ABC notation to MIDI files instantly with real-time preview and validation.</p>
            </div>
            
            <div class="abc2midi-feature-card">
                <div class="abc2midi-feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M8 5v14l11-7z"/>
                    </svg>
                </div>
                <h3 class="abc2midi-feature-title">Audio Playback</h3>
                <p class="abc2midi-feature-desc">Listen to your compositions with high-quality audio synthesis and playback controls.</p>
            </div>
            
            <div class="abc2midi-feature-card">
                <div class="abc2midi-feature-icon">
                    <svg viewBox="0 0 24 24">
                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                    </svg>
                </div>
                <h3 class="abc2midi-feature-title">Export Options</h3>
                <p class="abc2midi-feature-desc">Download MIDI files or print beautiful sheet music PDFs for your compositions.</p>
            </div>
        </div>
    </section>

    <!-- Converter Tool Section -->
    <section class="abc2midi-converter-section">
        <h2 class="abc2midi-section-title">Start Converting</h2>
        
        <div class="abc2midi-converter-container">
            <div class="abc2midi-converter-header">
                <h2 class="abc2midi-converter-title">ABC to MIDI Converter</h2>
                <p class="abc2midi-converter-subtitle">Transform musical notation into beautiful sound</p>
            </div>
            
            <div class="abc2midi-converter-content">
                <div class="abc2midi-input-section">
                    <label class="abc2midi-label">🎵 ABC Notation</label>
                    <textarea id="abc2midi-abc-input" class="abc2midi-textarea" placeholder="Enter your ABC notation here...">X:1
T:Example Tune
M:4/4
L:1/8
K:G
|: GABc dedB | dedB dedB | c2ec B2dB | A2BA G4 :|
|: ABcd efge | fgfe dedc | B2gB A2fA | G2BG D4 :|</textarea>
                    
                    <div class="abc2midi-controls">
                        <div class="abc2midi-examples-dropdown">
                            <select id="abc2midi-examples" class="abc2midi-select">
                                <option value="">🎼 Load Example...</option>
                                <option value="simple">🎹 Simple Melody</option>
                                <option value="jig">🍀 Irish Jig</option>
                                <option value="waltz">💃 Waltz</option>
                                <option value="bach">🎭 Bach Minuet</option>
                                <option value="multivoice">🎤 Multi-Voice</option>
                                <option value="complex">🎪 Complex Notation</option>
                            </select>
                        </div>
                        
                        <button id="abc2midi-convert-button" class="abc2midi-button abc2midi-button-primary">
                            <svg viewBox="0 0 24 24">
                                <path d="M10 16.5l6-4.5-6-4.5v9zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>
                            </svg>
                            Convert & Play
                        </button>
                    </div>
                    
                    <div class="abc2midi-error-message abc2midi-message" id="abc2midi-error-message"></div>
                    <div class="abc2midi-status-message abc2midi-message" id="abc2midi-status-message"></div>
                </div>
                
                <div class="abc2midi-score-section">
                    <label class="abc2midi-label">🎼 Score Preview</label>
                    
                    <div class="abc2midi-loader" id="abc2midi-loader">
                        <div class="abc2midi-spinner"></div>
                        <p>Generating beautiful music...</p>
                    </div>
                    
                    <div class="abc2midi-score-card">
                        <div id="abc2midi-score-output" class="abc2midi-score-output"></div>
                        <div id="abc2midi-audio-controls-container" class="abc2midi-audio-controls"></div>
                    </div>
                    
                    <div class="abc2midi-player-controls">
                        <button id="abc2midi-play-button" class="abc2midi-button abc2midi-button-success">
                            <svg viewBox="0 0 24 24">
                                <path d="M8 5v14l11-7z"/>
                            </svg>
                            Play
                        </button>
                        
                        <button id="abc2midi-stop-button" class="abc2midi-button abc2midi-button-warning">
                            <svg viewBox="0 0 24 24">
                                <path d="M6 6h12v12H6z"/>
                            </svg>
                            Stop
                        </button>
                        
                        <button id="abc2midi-restart-button" class="abc2midi-button">
                            <svg viewBox="0 0 24 24">
                                <path d="M12 5V1L7 6l5 5V7c3.31 0 6 2.69 6 6s-2.69 6-6 6-6-2.69-6-6H4c0 4.42 3.58 8 8 8s8-3.58 8-8-3.58-8-8-8z"/>
                            </svg>
                            Restart
                        </button>
                    </div>
                    
                    <div class="abc2midi-progress-container">
                        <div class="abc2midi-progress-bar-container">
                            <div class="abc2midi-progress-bar" id="abc2midi-progress-bar"></div>
                        </div>
                    </div>
                </div>
                
                <div class="abc2midi-download-section">
                    <label class="abc2midi-label">💾 Download Options</label>
                    
                    <div class="abc2midi-download-grid">
                        <a id="abc2midi-midi-download-link" class="abc2midi-download-card" style="display: none;" download="abc_midi.mid">
                            <svg viewBox="0 0 24 24">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            <div>
                                <div class="abc2midi-download-title">MIDI File</div>
                                <div class="abc2midi-download-desc">Download audio file</div>
                            </div>
                        </a>
                        
                        <button id="abc2midi-pdf-download-button" class="abc2midi-download-card" style="display: none;">
                            <svg viewBox="0 0 24 24">
                                <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                            </svg>
                            <div>
                                <div class="abc2midi-download-title">Sheet Music PDF</div>
                                <div class="abc2midi-download-desc">Print sheet music</div>
                            </div>
                        </button>
                    </div>
                </div>
                
                <div class="abc2midi-debug-info" id="abc2midi-debug-info"></div>
            </div>
        </div>
    </section>

    <!-- About Section -->
    <section class="abc2midi-about-section">
        <div class="abc2midi-about-content">
            <h2 class="abc2midi-about-title">About ABC Notation</h2>
            <p class="abc2midi-about-text">
                ABC notation is a shorthand form of musical notation that uses ASCII text to represent music. 
                It was originally developed by Chris Walshaw for folk and traditional tunes, but has since evolved 
                to support complex classical compositions and modern music.
            </p>
            <p class="abc2midi-about-text">
                Our converter uses the powerful ABCJS library to transform your ABC notation into interactive 
                sheet music and playable MIDI files. Whether you're a composer, educator, or music enthusiast, 
                this tool makes it easy to bring your musical ideas to life.
            </p>
        </div>
    </section>

    <!-- FAQ Section -->
    <section class="abc2midi-faq-section">
        <h2 class="abc2midi-faq-title">Frequently Asked Questions</h2>
        
        <div class="abc2midi-faq-item">
            <h3 class="abc2midi-faq-question">What is ABC notation?</h3>
            <p class="abc2midi-faq-answer">
                ABC notation is a text-based music notation system that allows you to write music using simple ASCII characters. 
                It's particularly popular for folk music, traditional tunes, and educational purposes due to its simplicity and portability.
            </p>
        </div>
        
        <div class="abc2midi-faq-item">
            <h3 class="abc2midi-faq-question">Can I use this tool offline?</h3>
            <p class="abc2midi-faq-answer">
                The tool requires an internet connection to load the ABCJS library and audio synthesis capabilities. 
                However, once loaded, most functionality works without additional network requests.
            </p>
        </div>
        
        <div class="abc2midi-faq-item">
            <h3 class="abc2midi-faq-question">What file formats can I export?</h3>
            <p class="abc2midi-faq-answer">
                You can export your compositions as MIDI files for audio playback in other applications, 
                or print them as PDF sheet music for traditional notation viewing and printing.
            </p>
        </div>
        
        <div class="abc2midi-faq-item">
            <h3 class="abc2midi-faq-question">Is there a limit to the complexity of ABC notation I can convert?</h3>
            <p class="abc2midi-faq-answer">
                The tool supports a wide range of ABC notation features including multiple voices, complex rhythms, 
                dynamics, and ornaments. Very large compositions may take longer to process, but there's no strict size limit.
            </p>
        </div>
    </section>

    <script>
        class ABC2MIDIConverter {
            constructor() {
                this.abcNotation = `X:1
T:Example Tune
M:4/4
L:1/8
K:G
|: GABc dedB | dedB dedB | c2ec B2dB | A2BA G4 :|
|: ABcd efge | fgfe dedc | B2gB A2fA | G2BG D4 :|`;
                this.synthControl = null;
                this.audioContext = null;
                this.visualObj = null;
                this.isPlaying = false;
                this.init();
            }

            init() {
                this.setupEventListeners();
                this.setupAudioContextOnUserInteraction();
                setTimeout(() => this.convertAndRender(), 500);
            }

            setupAudioContextOnUserInteraction() {
                const initAudioContext = () => {
                    if (!this.audioContext) {
                        try {
                            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            this.debugLog('Audio context initialized on user interaction');
                        } catch (e) {
                            this.debugLog(`Failed to initialize audio context: ${e.message}`);
                        }
                    }
                    
                    document.removeEventListener('click', initAudioContext);
                    document.removeEventListener('keydown', initAudioContext);
                    document.removeEventListener('touchstart', initAudioContext);
                };
                
                document.addEventListener('click', initAudioContext, { once: true });
                document.addEventListener('keydown', initAudioContext, { once: true });
                document.addEventListener('touchstart', initAudioContext, { once: true });
            }

            setupEventListeners() {
                const abcInput = document.getElementById('abc2midi-abc-input');
                const convertButton = document.getElementById('abc2midi-convert-button');
                const playButton = document.getElementById('abc2midi-play-button');
                const stopButton = document.getElementById('abc2midi-stop-button');
                const restartButton = document.getElementById('abc2midi-restart-button');
                const examplesDropdown = document.getElementById('abc2midi-examples');
                const pdfDownloadButton = document.getElementById('abc2midi-pdf-download-button');
                
                abcInput.addEventListener('input', () => {
                    this.abcNotation = abcInput.value;
                });

                convertButton.addEventListener('click', () => {
                    this.stopMidi();
                    this.abcNotation = abcInput.value;
                    this.convertAndRender();
                });

                playButton.addEventListener('click', () => {
                    this.abcNotation = abcInput.value;
                    this.playMidi();
                });

                stopButton.addEventListener('click', () => {
                    this.stopMidi();
                });

                restartButton.addEventListener('click', () => {
                    this.restartMidi();
                });

                examplesDropdown.addEventListener('change', () => {
                    const selectedValue = examplesDropdown.value;
                    if (selectedValue) {
                        this.stopMidi();
                        this.cleanupMidiPlayer();
                        abcInput.value = this.getExampleAbc(selectedValue);
                        this.abcNotation = abcInput.value;
                        this.convertAndRender();
                        examplesDropdown.value = "";
                    }
                });

                pdfDownloadButton.addEventListener('click', () => {
                    this.exportSheetMusicAsPdf();
                });

                this.cursorControl = {
                    onStart: () => {
                        const progressBar = document.getElementById('abc2midi-progress-bar');
                        if (progressBar) progressBar.style.width = '0%';
                    },
                    onEvent: (ev) => {
                        if (ev && ev.percentage !== undefined) {
                            const progressBar = document.getElementById('abc2midi-progress-bar');
                            if (progressBar) progressBar.style.width = `${ev.percentage}%`;
                        }
                    },
                    onFinished: () => {
                        const progressBar = document.getElementById('abc2midi-progress-bar');
                        if (progressBar) {
                            progressBar.style.width = '100%';
                            setTimeout(() => {
                                progressBar.style.width = '0%';
                            }, 1000);
                        }
                        this.isPlaying = false;
                    }
                };
            }

            getExampleAbc(example) {
                switch (example) {
                    case 'simple':
                        return `X:1
T:Simple Melody
M:4/4
L:1/8
Q:1/4=120
K:C
C2 D2 E2 F2 | G2 A2 B2 c2 | c2 B2 A2 G2 | F2 E2 D2 C2 |`;
                    case 'jig':
                        return `X:1
T:Irish Jig Example
M:6/8
L:1/8
Q:1/8=120
K:D
|:DFA AFA | BGB AFA | DFA AFA | BEE EFE :|
|:DFA AFA | BGB AFA | afd bge |1 fed edc :|2 fed ecA ||`;
                    case 'waltz':
                        return `X:1
T:Waltz Example
M:3/4
L:1/8
Q:1/4=80
K:G
D2 | G3A B2 | A3B c2 | B3A G2 | A4 D2 |
G3A B2 | A3B c2 | B3A G2 | G4 :|`;
                    case 'bach':
                        return `X:1
T:Minuet in G
C:J.S. Bach
M:3/4
L:1/8
Q:1/4=100
K:G
|:D2 | G3A B2 | A3B c2 | B2 A2 G2 | F4 D2 |
E3F G2 | F3G A2 | B2 A2 G2 | G4 :|
|:B2 | c3d e2 | e2 d2 c2 | B3c d2 | d2 c2 B2 |
c3d e2 | e2 d2 c2 | B2 A2 G2 | G4 :|`;
                    case 'multivoice':
                        return `X:1
T:Multi-Voice Example
M:4/4
L:1/4
Q:1/4=120
K:C
V:1
C D E F | G2 E2 | C4 |
V:2
E, G, C C | B,2 C2 | E4 |
V:3
C, C, C, C, | G,2 C,2 | C,4 |`;
                    case 'complex':
                        return `X:1
T:Complex Notation Example
M:4/4
L:1/8
Q:1/4=90
K:G
%%score (T1 T2) (B1 B2)
V:T1 name="Soprano"
!p! G4 A4 | B4 c4 | !f! d2 c2 B2 A2 | G8 |]
V:T2 name="Alto" clef=treble
!p! D4 D4 | D4 E4 | !f! G2 G2 G2 F2 | D8 |]
V:B1 name="Tenor" clef=bass
!p! B,4 A,4 | G,4 G,4 | !f! B,2 E2 D2 D2 | B,8 |]
V:B2 name="Bass" clef=bass
!p! G,,4 F,,4 | E,,4 C,,4 | !f! G,,2 C,2 D,2 D,,2 | G,,8 |]`;
                    default:
                        return this.abcNotation;
                }
            }

            validateAbcNotation(notation) {
                try {
                    if (!notation || notation.trim() === '') {
                        return { valid: false, error: 'ABC notation is empty' };
                    }

                    const lines = notation.split('\n');
                    const requiredHeaders = ['X:', 'M:', 'L:', 'K:'];
                    const foundHeaders = requiredHeaders.filter(header => 
                        lines.some(line => line.trim().startsWith(header))
                    );

                    if (foundHeaders.length < requiredHeaders.length) {
                        return {
                            valid: false,
                            error: `Missing required ABC headers: ${requiredHeaders.filter(h => !foundHeaders.includes(h)).join(', ')}`
                        };
                    }

                    let hasNotes = false;
                    let measureCount = 0;

                    for (const line of lines) {
                        const trimmedLine = line.trim();
                        if (trimmedLine === '' || trimmedLine.startsWith('%')) continue;
                        if (trimmedLine.match(/^[A-Za-z]:/)) continue;
                        
                        if (trimmedLine.includes('|')) {
                            measureCount += (trimmedLine.match(/\|/g) || []).length;
                        }
                        
                        if (trimmedLine.match(/[A-Ga-g][,']*[0-9]*/)) {
                            hasNotes = true;
                        }
                    }

                    if (measureCount === 0) {
                        return { valid: false, error: 'No measures found in the ABC notation. Please add bar lines (|).' };
                    }

                    if (!hasNotes) {
                        return { valid: false, error: 'No notes found in the ABC notation.' };
                    }

                    return { valid: true };
                } catch (error) {
                    return { valid: false, error: `Invalid ABC notation: ${error.message}` };
                }
            }

            cleanupMidiPlayer() {
                try {
                    if (this.isPlaying) {
                        this.stopMidi();
                    }
                    
                    if (this.synthControl) {
                        if (typeof this.synthControl.destroy === 'function') {
                            this.synthControl.destroy();
                        }
                        this.synthControl = null;
                    }
                    
                    const audioControlsContainer = document.getElementById('abc2midi-audio-controls-container');
                    if (audioControlsContainer) {
                        audioControlsContainer.innerHTML = '';
                    }
                    
                    if (this.audioContext && this.audioContext.state !== 'closed') {
                        this.audioContext.suspend().catch(e => this.debugLog(`Error suspending audio context: ${e}`));
                    }
                    
                    this.visualObj = null;
                    this.isPlaying = false;
                    this.debugLog('MIDI player and audio context cleaned up');
                } catch (error) {
                    this.debugLog(`Error cleaning up MIDI player: ${error.message}`);
                }
            }

            convertAndRender() {
                const scoreOutput = document.getElementById('abc2midi-score-output');
                const errorMessage = document.getElementById('abc2midi-error-message');
                const loader = document.getElementById('abc2midi-loader');
                const midiDownloadLink = document.getElementById('abc2midi-midi-download-link');
                const pdfDownloadButton = document.getElementById('abc2midi-pdf-download-button');
                const abcInput = document.getElementById('abc2midi-abc-input');
                const progressBar = document.getElementById('abc2midi-progress-bar');
                const statusMessage = document.getElementById('abc2midi-status-message');
                const audioControlsContainer = document.getElementById('abc2midi-audio-controls-container');

                this.cleanupMidiPlayer();

                errorMessage.style.display = 'none';
                errorMessage.textContent = '';
                statusMessage.style.display = 'none';
                statusMessage.textContent = '';
                midiDownloadLink.style.display = 'none';
                pdfDownloadButton.style.display = 'none';
                
                if (progressBar) {
                    progressBar.style.width = '0%';
                }
                if (audioControlsContainer) {
                    audioControlsContainer.innerHTML = '';
                }
                
                loader.style.display = 'block';

                this.abcNotation = abcInput.value;

                if (!window.ABCJS) {
                    loader.style.display = 'none';
                    this.showError('ABCJS library not loaded. Please refresh the page and try again.');
                    return;
                }

                try {
                    const validation = this.validateAbcNotation(this.abcNotation);
                    if (!validation.valid) {
                        throw new Error(validation.error);
                    }

                    scoreOutput.innerHTML = '';

                    const renderOptions = {
                        responsive: 'resize',
                        add_classes: true,
                        staffwidth: 740,
                        scale: 1,
                        paddingleft: 15,
                        paddingright: 15,
                        paddingbottom: 15,
                        paddingtop: 15
                    };

                    try {
                        this.visualObj = window.ABCJS.renderAbc(scoreOutput, this.abcNotation, renderOptions)[0];
                    } catch (renderError) {
                        throw new Error(`Failed to render ABC notation: ${renderError.message}`);
                    }

                    if (!this.visualObj) {
                        throw new Error('Failed to render ABC notation. Please check your syntax.');
                    }

                    this.debugLog('Rendered visual object successfully');

                    // Check for synth support with better detection
                    const hasMidiSupport = window.ABCJS && 
                                          window.ABCJS.synth && 
                                          window.ABCJS.synth.SynthController && 
                                          window.ABCJS.synth.getMidiFile;
                                          
                    this.debugLog(`MIDI support available: ${hasMidiSupport}`);
                    
                    if (hasMidiSupport) {
                        if (!this.audioContext) {
                            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                            this.debugLog('Created new audio context');
                        }
                        
                        if (this.audioContext.state === 'suspended') {
                            this.audioContext.resume()
                                .then(() => this.debugLog('Audio context resumed'))
                                .catch(e => this.debugLog(`Error resuming audio context: ${e}`));
                        }
                        
                        this.initializeSynthControl()
                            .then(() => {
                                const midiData = this.generateMidiDownload();
                                if (midiData) {
                                    midiDownloadLink.href = midiData;
                                    midiDownloadLink.style.display = 'flex';
                                }
                                pdfDownloadButton.style.display = 'flex';
                                loader.style.display = 'none';
                                this.showStatus('ABC notation converted successfully!');
                            })
                            .catch(error => {
                                loader.style.display = 'none';
                                this.showError(`MIDI playback initialization failed: ${error.message}`);
                                const midiData = this.generateMidiDownload();
                                if (midiData) {
                                    midiDownloadLink.href = midiData;
                                    midiDownloadLink.style.display = 'flex';
                                }
                                pdfDownloadButton.style.display = 'flex';
                            });
                    } else {
                        loader.style.display = 'none';
                        this.showStatus('Score rendered (MIDI features not available in this browser)');
                        pdfDownloadButton.style.display = 'flex';
                    }
                } catch (error) {
                    loader.style.display = 'none';
                    this.showError(error.message || 'Failed to convert ABC notation. Please check your input syntax.');
                }
            }

            initializeSynthControl() {
                return new Promise((resolve, reject) => {
                    try {
                        if (!this.audioContext) {
                            this.audioContext = new (window.AudioContext || window.webkitAudioContext)();
                        }
                        
                        if (this.audioContext.state === 'suspended') {
                            this.audioContext.resume().catch(e => this.debugLog(`Error resuming audio context: ${e}`));
                        }
                        
                        const audioControlsContainer = document.getElementById('abc2midi-audio-controls-container');
                        if (!audioControlsContainer) {
                            reject(new Error('Audio controls container not found'));
                            return;
                        }
                        
                        audioControlsContainer.innerHTML = '';
                        
                        const synthWrapper = document.createElement('div');
                        synthWrapper.id = 'abc2midi-synthcontrol';
                        audioControlsContainer.appendChild(synthWrapper);
                        
                        this.synthControl = new window.ABCJS.synth.SynthController();
                        
                        this.debugLog('Setting up synth controller with direct element reference');
                        
                        this.synthControl.load(synthWrapper, this.cursorControl, {
                            displayLoop: true,
                            displayRestart: true,
                            displayPlay: true,
                            displayProgress: true,
                            displayWarp: true
                        });
                        
                        const tempoValue = this.extractTempo(this.abcNotation);
                        
                        this.synthControl.setTune(this.visualObj, false, {
                            qpm: tempoValue,
                            program: 0,
                            midiTranspose: 0,
                            soundFontUrl: "https://paulrosen.github.io/midi-js-soundfonts/FluidR3_GM/",
                            pan: this.getPanSettings(this.abcNotation)
                        }).then(() => {
                            this.debugLog('Synth controller initialized successfully');
                            resolve();
                        }).catch(error => {
                            this.debugLog(`Error initializing synth controller: ${error.message}`);
                            reject(error);
                        });
                    } catch (error) {
                        this.debugLog(`Error in initializeSynthControl: ${error.message}`);
                        reject(error);
                    }
                });
            }

            extractTempo(notation) {
                const complexMatch = notation.match(/Q:\s*(?:"[^"]*"\s*)?(?:C?\s*)?(\d+)\/(\d+)\s*=\s*(\d+)/);
                if (complexMatch) {
                    const noteValue = parseInt(complexMatch[1], 10) / parseInt(complexMatch[2], 10);
                    const bpm = parseInt(complexMatch[3], 10);
                    return bpm * (noteValue * 4);
                }

                const simpleMatch = notation.match(/Q:\s*(?:"[^"]*"\s*)?(?:C?\s*)?(\d+)/);
                if (simpleMatch) {
                    return parseInt(simpleMatch[1], 10);
                }

                const timeSignature = this.extractTimeSignature(notation);
                switch (timeSignature) {
                    case '2/4': return 90;
                    case '3/4': return 80;
                    case '4/4': return 100;
                    case '6/8': return 120;
                    default: return 100;
                }
            }

            extractTimeSignature(notation) {
                const match = notation.match(/M:\s*(\d+)\/(\d+)/);
                return match ? `${match[1]}/${match[2]}` : '4/4';
            }

            getPanSettings(notation) {
                const voiceMatches = notation.match(/V:[^\r\n]+/g);
                const voiceCount = voiceMatches ? new Set(voiceMatches.map(v => {
                    const match = v.match(/V:([^ \r\n]+)/);
                    return match ? match[1].trim() : '';
                })).size : 0;

                if (voiceCount <= 1) return [];

                const panArray = [];
                for (let i = 0; i < voiceCount; i++) {
                    const pan = -0.7 + (i * 1.4 / (voiceCount - 1));
                    panArray.push(pan);
                }

                this.debugLog(`Created pan settings for ${voiceCount} voices: ${JSON.stringify(panArray)}`);
                return panArray;
            }

            generateMidiDownload() {
                try {
                    if (!this.abcNotation || this.abcNotation.trim() === '') {
                        this.debugLog('No ABC notation to generate MIDI');
                        return null;
                    }

                    const tempoValue = this.extractTempo(this.abcNotation);
                    let visualObj = this.visualObj;
                    
                    if (!visualObj) {
                        const tempDiv = document.createElement('div');
                        tempDiv.style.position = 'absolute';
                        tempDiv.style.left = '-9999px';
                        document.body.appendChild(tempDiv);

                        try {
                            visualObj = window.ABCJS.renderAbc(tempDiv, this.abcNotation, {
                                add_classes: false,
                                responsive: false
                            })[0];
                        } catch (parseError) {
                            this.debugLog(`Error parsing for MIDI generation: ${parseError.message}`);
                            return null;
                        }
                        document.body.removeChild(tempDiv);
                    }

                    let midiBuffer;
                    if (window.ABCJS.synth && window.ABCJS.synth.getMidiFile) {
                        const midiOptions = {
                            midiOutputType: 'binary',
                            generateDownload: true,
                            qpm: tempoValue,
                            program: 0,
                            midiTranspose: 0,
                            voicesOff: false,
                            chordsOff: false
                        };
                        midiBuffer = window.ABCJS.synth.getMidiFile(visualObj, midiOptions);
                    } else {
                        throw new Error('MIDI generation not supported');
                    }

                    if (!midiBuffer || !midiBuffer.length) {
                        this.debugLog('Generated MIDI buffer is empty');
                        return null;
                    }

                    const base64 = 'data:audio/midi;base64,' + btoa(
                        Array.from(new Uint8Array(midiBuffer))
                            .map(byte => String.fromCharCode(byte))
                            .join('')
                    );

                    this.debugLog(`Generated MIDI file with size: ${midiBuffer.length} bytes`);
                    return base64;
                } catch (error) {
                    this.debugLog(`Error generating MIDI download: ${error.message}`);
                    return null;
                }
            }

            exportSheetMusicAsPdf() {
                try {
                    const scoreOutput = document.getElementById('abc2midi-score-output');
                    if (!scoreOutput || !scoreOutput.innerHTML) {
                        this.showError('No sheet music available to export');
                        return;
                    }

                    const printContainer = document.createElement('div');
                    printContainer.style.position = 'absolute';
                    printContainer.style.left = '-9999px';
                    printContainer.style.background = 'white';
                    printContainer.style.padding = '20px';

                    const titleMatch = this.abcNotation.match(/T:\s*([^\r\n]*)/);
                    const title = titleMatch ? titleMatch[1].trim() : 'ABC Sheet Music';
                    const titleElement = document.createElement('h1');
                    titleElement.style.fontFamily = 'Arial, sans-serif';
                    titleElement.style.textAlign = 'center';
                    titleElement.style.margin = '0 0 10px 0';
                    titleElement.textContent = title;
                    printContainer.appendChild(titleElement);

                    const composerMatch = this.abcNotation.match(/C:\s*([^\r\n]*)/);
                    if (composerMatch) {
                        const composer = composerMatch[1].trim();
                        const composerElement = document.createElement('h3');
                        composerElement.style.fontFamily = 'Arial, sans-serif';
                        composerElement.style.textAlign = 'center';
                        composerElement.style.margin = '0 0 20px 0';
                        composerElement.style.fontWeight = 'normal';
                        composerElement.textContent = `Composer: ${composer}`;
                        printContainer.appendChild(composerElement);
                    }

                    const scoreClone = scoreOutput.cloneNode(true);
                    printContainer.appendChild(scoreClone);

                    const footer = document.createElement('div');
                    footer.style.marginTop = '20px';
                    footer.style.borderTop = '1px solid #ccc';
                    footer.style.paddingTop = '10px';
                    footer.style.fontSize = '10px';
                    footer.style.textAlign = 'center';
                    footer.style.color = '#666';
                    const dateOptions = { year: 'numeric', month: 'short', day: 'numeric' };
                    footer.textContent = `Generated on ${new Date().toLocaleDateString(undefined, dateOptions)} using ABC to MIDI Converter`;
                    printContainer.appendChild(footer);

                    document.body.appendChild(printContainer);
                    window.print();
                    setTimeout(() => {
                        document.body.removeChild(printContainer);
                    }, 100);

                    this.debugLog('Initiated sheet music PDF export');
                } catch (error) {
                    this.showError('Failed to export sheet music as PDF');
                }
            }

            playMidi() {
                try {
                    const abcInput = document.getElementById('abc2midi-abc-input');
                    this.abcNotation = abcInput.value;
                    const errorMessage = document.getElementById('abc2midi-error-message');
                    errorMessage.style.display = 'none';

                    const validation = this.validateAbcNotation(this.abcNotation);
                    if (!validation.valid) {
                        this.showError(validation.error);
                        return;
                    }
                    
                    if (this.synthControl) {
                        this.startPlayback();
                    } else {
                        this.showStatus('Initializing playback...');
                        this.initializeSynthControl()
                            .then(() => {
                                this.startPlayback();
                            })
                            .catch(error => {
                                this.showError(`Failed to initialize MIDI player: ${error.message}`);
                            });
                    }
                } catch (error) {
                    this.showError(`Error starting playback: ${error.message}`);
                }
            }

            startPlayback() {
                try {
                    if (!this.synthControl) {
                        throw new Error('Synth controller not initialized');
                    }
                    
                    if (this.audioContext && this.audioContext.state === 'suspended') {
                        this.audioContext.resume().catch(e => this.debugLog(`Error resuming audio context: ${e}`));
                    }
                    
                    this.showStatus('Starting playback...');
                    
                    this.synthControl.play();
                    this.isPlaying = true;
                    this.debugLog('MIDI playback started successfully');
                } catch (error) {
                    this.handlePlaybackError(error);
                }
            }

            handlePlaybackError(error) {
                let errorMessage = 'Failed to play MIDI. Please check your ABC notation.';
                if (error.message) {
                    if (error.message.includes('harmony')) {
                        errorMessage = 'Failed to play MIDI: Unsupported harmony elements.';
                    } else if (error.message.includes('measure')) {
                        errorMessage = 'Failed to play MIDI: Measure duration mismatch.';
                    } else if (error.message.includes('voice')) {
                        errorMessage = 'Failed to play MIDI: Voice conflicts in notation.';
                    } else if (error.message.includes('syntax')) {
                        errorMessage = 'Failed to play MIDI: Syntax error in notation.';
                    } else {
                        errorMessage = `Failed to play MIDI: ${error.message}`;
                    }
                }
                this.showError(errorMessage);
                this.cleanupMidiPlayer();
            }

            stopMidi() {
                try {
                    if (this.synthControl) {
                        if (typeof this.synthControl.pause === 'function') {
                            this.synthControl.pause();
                        }
                        this.debugLog('MIDI playback stopped');
                        const progressBar = document.getElementById('abc2midi-progress-bar');
                        if (progressBar) {
                            progressBar.style.width = '0%';
                        }
                        this.isPlaying = false;
                    }
                    
                    if (this.audioContext && this.audioContext.state === 'running') {
                        this.audioContext.suspend().catch(e => this.debugLog(`Error suspending audio context: ${e}`));
                    }
                } catch (error) {
                    this.debugLog(`Error stopping MIDI: ${error.message}`);
                }
            }

            restartMidi() {
                this.stopMidi();
                this.debugLog('Restarting MIDI playback');
                
                setTimeout(() => {
                    if (this.synthControl) {
                        try {
                            this.synthControl.restart();
                            this.isPlaying = true;
                            this.debugLog('MIDI playback restarted successfully');
                        } catch (error) {
                            this.debugLog(`Error restarting MIDI: ${error.message}`);
                            this.playMidi();
                        }
                    } else {
                        this.playMidi();
                    }
                }, 100);
            }

            showError(message) {
                const errorMessage = document.getElementById('abc2midi-error-message');
                errorMessage.textContent = message;
                errorMessage.style.display = 'block';
                this.debugLog(`Error: ${message}`);
            }

            showStatus(message) {
                const statusMessage = document.getElementById('abc2midi-status-message');
                if (statusMessage) {
                    statusMessage.textContent = message;
                    statusMessage.style.display = 'block';
                    setTimeout(() => {
                        statusMessage.style.display = 'none';
                    }, 5000);
                }
                this.debugLog(`Status: ${message}`);
            }

            debugLog(message) {
                const debugInfo = document.getElementById('abc2midi-debug-info');
                if (debugInfo) {
                    const timestamp = new Date().toLocaleTimeString();
                    const newLine = document.createElement('div');
                    newLine.textContent = `[${timestamp}] ${message}`;
                    while (debugInfo.childNodes.length >= 20) {
                        debugInfo.removeChild(debugInfo.firstChild);
                    }
                    debugInfo.appendChild(newLine);
                    debugInfo.scrollTop = debugInfo.scrollHeight;
                }
                console.log(message);
            }
        }

        // Initialize the converter when DOM is ready
        document.addEventListener('DOMContentLoaded', () => {
            new ABC2MIDIConverter();
        });

        // Schema.org structured data for SEO
        const structuredData = {
            "@context": "https://schema.org",
            "@type": "WebApplication",
            "name": "ABC to MIDI Converter",
            "description": "Convert ABC notation to MIDI files instantly with playback and sheet music preview",
            "url": window.location.href,
            "applicationCategory": "MusicApplication",
            "operatingSystem": "Web Browser",
            "offers": {
                "@type": "Offer",
                "price": "0",
                "priceCurrency": "USD"
            },
            "featureList": [
                "Convert ABC notation to MIDI",
                "Audio playback",
                "Sheet music preview",
                "PDF export",
                "Multiple voice support"
            ]
        };

        const script = document.createElement('script');
        script.type = 'application/ld+json';
        script.textContent = JSON.stringify(structuredData);
        document.head.appendChild(script);
    </script>
</body>
</html>
